unit       = oa11)
oa_agg_all <- GMP_manc %>%
group_by(oa11) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, oa11, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg <- bind_rows(oa_agg, oa_agg_all)
# At the LSOA level.
lsoa_agg <- GMP_manc %>%
group_by(Crime.type, lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg_all <- GMP_manc %>%
group_by(lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, lsoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg <- bind_rows(lsoa_agg, lsoa_agg_all)
# At the MSOA level.
msoa_agg <- GMP_manc %>%
group_by(Crime.type, msoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg_all <- GMP_manc %>%
group_by(msoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, msoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg <- bind_rows(msoa_agg, msoa_agg_all)
# At the Ward level.
wd_agg <- GMP_manc %>%
group_by(Crime.type, WD18CD) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg_all <- GMP_manc %>%
group_by(WD18CD) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, WD18CD, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg <- bind_rows(wd_agg, wd_agg_all)
# Bind together with main comparison dataset.
oa_compare_df <- oa_compare_df %>%
select(-unit_type) %>%
full_join(oa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
lsoa_compare_df <- lsoa_compare_df %>%
full_join(lsoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
msoa_compare_df <- msoa_compare_df %>%
full_join(msoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
ward_compare_df <- ward_compare_df %>%
full_join(wd_agg, by = c("crime_type", "unit"))
# Map RD across all scales 19.05.2020 David
oa_levels_df <- oa_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
lsoa_levels_df <- lsoa_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
msoa_levels_df <- msoa_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
ward_levels_df <- ward_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
# Check missings
sum(is.na(oa_levels_df$abs_RD)) # This is an OA that that zero crimes (real and simulated).
sum(is.na(lsoa_levels_df$abs_RD))
sum(is.na(msoa_levels_df$abs_RD))
sum(is.na(ward_levels_df$abs_RD))
# Calculate breaks (note this omits the missing at OA-level).
oa_brks <- classIntervals(oa_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
lsoa_brks <- classIntervals(lsoa_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
msoa_brks <- classIntervals(msoa_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
ward_brks <- classIntervals(ward_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
oa_levels_sf <- oa_levels_df %>%
drop_na(abs_RD)  %>% # Drop the observation which had no crimes and thus no abs_rd
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, oa_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
lsoa_levels_sf <- lsoa_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, lsoa_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
table(lsoa_levels_sf$RD_cut)
msoa_levels_sf <- msoa_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, msoa_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
table(msoa_levels_sf$RD_cut)
ward_levels_sf <- ward_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
table(ward_levels_sf$RD_cut)
View(ward_levels_df)
# Get 5 set colours, avoiding the overly light one, so ask for 6 and get 5.
greypal <- brewer_pal(palette = "Greys")(6)[2:6] # main
# OA plot.
p1 <- ggplot(data = oa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = greypal) +
labs(fill = "RD %", title = "OA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# LSOA plot.
p2 <- ggplot(data = lsoa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "LSOA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# MSOA plot.
p3 <- ggplot(data = msoa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "MSOA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Ward plot.
p4 <- ggplot(data = ward_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "Ward") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Plot just to get legend.
leg <- ggplot(data = oa_levels_sf) + theme_minimal() + geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") + scale_fill_manual(values = greypal) + labs(fill = "RD %") + theme(legend.position = "bottom")
leg_p <- get_legend(leg)
# Arrange plots.
maps_plot <- plot_grid(p1, p2, p3, p4, nrow = 1)
ward_levels_sf <- ward_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
st_geometry(ward_levels_sf) <- st_centroid(ward_levels_sf)
st_geometry(ward_levels_df) <- st_centroid(ward_levels_df)
class(ward_levels_df)
class(msoa_levels_df)
ward_levels_df <- as_Spatial(ward_levels_df)
ward_levels_df <- st_as_sf(ward_levels_df)
ward_levels_df <- st_centroid(ward_levels_df)
ward_levels_sf <- ward_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
# Load in spatial polygons at OA, LSOA, MSOA and Ward level.
ward_sf <- st_read("data/shapefiles/ward_manc_sf.shp")
msoa_sf <- st_read("data/shapefiles/msoa_manc_sf.shp")
lsoa_sf <- st_read("data/shapefiles/lsoa_manc_sf.shp")
oa_sf   <- st_read("data/shapefiles/oa_manc_sf.shp")
# Compile into list and name elements.
sf_list <- list(ward_sf, msoa_sf, lsoa_sf, oa_sf)
names(sf_list) <- c("ward_sf","msoa_sf","lsoa_sf","oa_sf")
# Set CRS.
sf_list <- lapply(sf_list, function(x)st_transform(x, 27700))
# For now, split sf_list back into different objects.
list2env(sf_list,envir=.GlobalEnv)
# Aggregating point to polygons: Ward
ward_agg_list <- lapply(GMP_all_list_sf, function(x)ward_sf %>% mutate(count = lengths(st_intersects(ward_sf, x))))
# Aggregating point to polygons: MSOA
msoa_agg_list <- lapply(GMP_all_list_sf, function(x)msoa_sf %>% mutate(count = lengths(st_intersects(msoa_sf, x))))
# Aggregating point to polygons: LSOA
lsoa_agg_list <- lapply(GMP_all_list_sf, function(x)lsoa_sf %>% mutate(count = lengths(st_intersects(lsoa_sf, x))))
# Aggregating point to polygons: OA
oa_agg_list <- lapply(GMP_all_list_sf, function(x)oa_sf %>% mutate(count = lengths(st_intersects(oa_sf, x))))
# Split existing unit_list into list of lists.
unit_list_crime_types <- lapply(units_list, function(x)group_split(x, unit_type))
# The first element of each list is LAD, which we don't need for the comaprison. Keeping it would complicate the join.
unit_list_crime_types <- lapply(unit_list_crime_types, function(x) x[-1])
# Collate each list into global environment by crime type. First check what objects will be called.
names(unit_list_crime_types)
list2env(unit_list_crime_types,envir=.GlobalEnv)
# Extract each spatial scale (i.e. each element of 'unit_list_crime_types').
lsoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[1]])
msoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[2]])
oa_gmp_df   <- lapply(unit_list_crime_types, function(x) x[[3]])
ward_gmp_df <- lapply(unit_list_crime_types, function(x) x[[4]])
# Order elements of each list to we can use map2 easily to for joins.
oa_gmp_df   <- oa_gmp_df  [order(names(oa_gmp_df  ))]
lsoa_gmp_df <- lsoa_gmp_df[order(names(lsoa_gmp_df))]
msoa_gmp_df <- msoa_gmp_df[order(names(msoa_gmp_df))]
ward_gmp_df <- ward_gmp_df[order(names(ward_gmp_df))]
oa_agg_list   <- oa_agg_list  [order(names(oa_agg_list  ))]
lsoa_agg_list <- lsoa_agg_list[order(names(lsoa_agg_list))]
msoa_agg_list <- msoa_agg_list[order(names(msoa_agg_list))]
ward_agg_list <- ward_agg_list[order(names(ward_agg_list))]
# Rename code name in Ward for join.
ward_agg_list <- lapply(ward_agg_list, function(x) x %>% rename(code = wd18cd))
# Join all.
join_fun <- function(x, y){
right_join(x, y, by = c("unit" = "code"))
}
# Run through join on each list.
oa_compare_list   <- map2(oa_gmp_df  , oa_agg_list  , join_fun)
lsoa_compare_list <- map2(lsoa_gmp_df, lsoa_agg_list, join_fun)
msoa_compare_list <- map2(msoa_gmp_df, msoa_agg_list, join_fun)
ward_compare_list <- map2(ward_gmp_df, ward_agg_list, join_fun)
# Bind together for each descriptive stats. Note warning about geometry: not a problem for now, it just removes the
# spatial attributes but retains the geometry column.
oa_compare_df   <- bind_rows(oa_compare_list  , .id = "crime_type")
lsoa_compare_df <- bind_rows(lsoa_compare_list, .id = "crime_type")
msoa_compare_df <- bind_rows(msoa_compare_list, .id = "crime_type")
ward_compare_df <- bind_rows(ward_compare_list, .id = "crime_type")
# Aggregate crime data without searching points in polygons.
# At the Output Area level.
oa_agg <- GMP_manc %>%
group_by(Crime.type, oa11) %>%
summarise(GMP_agg = n()) %>%
filter(Crime.type != "other") %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg_all <- GMP_manc %>%
group_by(oa11) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, oa11, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg <- bind_rows(oa_agg, oa_agg_all)
# At the LSOA level.
lsoa_agg <- GMP_manc %>%
group_by(Crime.type, lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg_all <- GMP_manc %>%
group_by(lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, lsoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg <- bind_rows(lsoa_agg, lsoa_agg_all)
# At the MSOA level.
msoa_agg <- GMP_manc %>%
group_by(Crime.type, msoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg_all <- GMP_manc %>%
group_by(msoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, msoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg <- bind_rows(msoa_agg, msoa_agg_all)
# At the Ward level.
wd_agg <- GMP_manc %>%
group_by(Crime.type, WD18CD) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg_all <- GMP_manc %>%
group_by(WD18CD) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, WD18CD, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg <- bind_rows(wd_agg, wd_agg_all)
# Bind together with main comparison dataset.
oa_compare_df <- oa_compare_df %>%
select(-unit_type) %>%
full_join(oa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
lsoa_compare_df <- lsoa_compare_df %>%
full_join(lsoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
msoa_compare_df <- msoa_compare_df %>%
full_join(msoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
ward_compare_df <- ward_compare_df %>%
full_join(wd_agg, by = c("crime_type", "unit"))
# Map RD across all scales 19.05.2020 David
oa_levels_df <- oa_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
lsoa_levels_df <- lsoa_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
msoa_levels_df <- msoa_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
ward_levels_df <- ward_compare_df %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD)) %>%
filter(crime_type == "theft")
# Check missings
sum(is.na(oa_levels_df$abs_RD)) # This is an OA that that zero crimes (real and simulated).
sum(is.na(lsoa_levels_df$abs_RD))
sum(is.na(msoa_levels_df$abs_RD))
sum(is.na(ward_levels_df$abs_RD))
# Calculate breaks (note this omits the missing at OA-level).
oa_brks <- classIntervals(oa_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
lsoa_brks <- classIntervals(lsoa_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
msoa_brks <- classIntervals(msoa_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
ward_brks <- classIntervals(ward_levels_df$abs_RD, n = 5, style="fixed",
fixedBreaks = c(0, 20, 40, 60, 80, 100))
oa_levels_sf <- oa_levels_df %>%
drop_na(abs_RD)  %>% # Drop the observation which had no crimes and thus no abs_rd
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, oa_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
lsoa_levels_sf <- lsoa_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, lsoa_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
table(lsoa_levels_sf$RD_cut)
msoa_levels_sf <- msoa_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, msoa_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
table(msoa_levels_sf$RD_cut)
ward_levels_df <- st_centroid(ward_levels_df)
ward_levels_sf <- ward_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
View(msoa_levels_df)
ward_sf <- st_read("data/shapefiles/ward_manc_sf.shp")
ward_levels_df2 <- left_join(ward_sf, ward_levels_df)
ward <- st_as_sf(ward_sf)
View(ward_sf)
View(ward_levels_df)
ward_levels_df2 <- ward_compare_df %>%
mutate(geometry = ward_sf$geometry)
ward_levels_df2 <- ward_compare_df %>%
select(-geometry) %>%
cbind(ward_sf$geometry)
ward_sf$geometry
View(ward_compare_df)
ward_levels_df2 <- ward_compare_df %>%
select(-geometry) %>%
left_join(ward_sf, by = "unit")
View(ward_sf)
ward_levels_df2 <- ward_compare_df %>%
select(-geometry) %>%
left_join(ward_sf, by = c("unit" = "wd18cd"))
View(ward_levels_df2)
ward_levels_sf <- ward_levels_df %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
ward_levels_sf <- ward_levels_df2 %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
ward_levels_df2 <- ward_levels_df %>%
select(-geometry) %>%
left_join(ward_sf, by = c("unit" = "wd18cd"))
ward_levels_sf <- ward_levels_df2 %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(RD_cut = cut(abs_RD, ward_brks$brks, include.lowest = T, dig.lab = 5)) %>%
mutate(RD_cut = fct_recode(RD_cut, "0-20" = "[0,20]", "20-40" = "(20,40]", "40-60" = "(40,60]", "60-80" = "(60,80]", "80-100"="(80,100]"))
table(ward_levels_sf$RD_cut)
# Get 5 set colours, avoiding the overly light one, so ask for 6 and get 5.
greypal <- brewer_pal(palette = "Greys")(6)[2:6] # main
# OA plot.
p1 <- ggplot(data = oa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = greypal) +
labs(fill = "RD %", title = "OA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# LSOA plot.
p2 <- ggplot(data = lsoa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "LSOA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# MSOA plot.
p3 <- ggplot(data = msoa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "MSOA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Ward plot.
p4 <- ggplot(data = ward_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "Ward") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Plot just to get legend.
leg <- ggplot(data = oa_levels_sf) + theme_minimal() + geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") + scale_fill_manual(values = greypal) + labs(fill = "RD %") + theme(legend.position = "bottom")
leg_p <- get_legend(leg)
# Arrange plots.
maps_plot <- plot_grid(p1, p2, p3, p4, nrow = 1)
full_plot <- plot_grid(maps_plot, leg_p, nrow = 2)
full_plot
# Compute correlations between crimes known to police (simulated data) and crime recorded by GMP (direct aggregates).
cor_oa_df <- oa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_oa_df
cor_lsoa_df <- lsoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_lsoa_df
cor_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_msoa_df
cor_ward_df <- ward_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_ward_df
# Compute correlations between crimes known to police (simulated data) and crime recorded by GMP (points in polygons).
cor_oa_df <- oa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_oa_df
cor_lsoa_df <- lsoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_lsoa_df
cor_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_msoa_df
cor_ward_df <- ward_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_ward_df
# Regain spatial attributes.
oa_compare_sf_list   <- lapply(oa_compare_list  , function(x) st_as_sf(x))
lsoa_compare_sf_list <- lapply(lsoa_compare_list, function(x) st_as_sf(x))
msoa_compare_sf_list <- lapply(msoa_compare_list, function(x) st_as_sf(x))
ward_compare_sf_list <- lapply(ward_compare_list, function(x) st_as_sf(x))
# Proximity matrix function to compute Local Moran's I.
# Adjust tolerance to avoid errenous 'no neighbours'. The figure 1e-005 used based on default in GeoDa 1.14.
prox_fun <- function(x) {
temp <- poly2nb(x, row.names = x$unit, snap = 1e-005)
nb2listw(temp)
}
# Run for each spatial scale (any one of the elements in the list will do).
oa_prox   <- prox_fun(oa_compare_sf_list  [[1]])
lsoa_prox <- prox_fun(lsoa_compare_sf_list[[1]])
msoa_prox <- prox_fun(msoa_compare_sf_list[[1]])
ward_prox <- prox_fun(ward_compare_sf_list[[1]])
# Check neighours stats compared to GeoDa. Results are either identical or very similar.
oa_prox$neighbours
lsoa_prox$neighbours
msoa_prox$neighbours
ward_prox$neighbours
# Global Morans'I.
mi_oa_df <- oa_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ count), oa_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ count), oa_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ count), oa_prox)$p.value)
mi_oa_df
mi_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ count), msoa_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ count), msoa_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ count), msoa_prox)$p.value)
mi_msoa_df
