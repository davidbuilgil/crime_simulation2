Sex_by_OA_Manchester <- read_csv(here("data","Sex_by_OA_Manchester_replicate.csv"))
# Join the OA-level sex data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Sex_by_OA_Manchester, by = "OA")
# Create sex for each resident based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(Male = rbinom(n = N, size = 1, prob = Mean_male)) %>%
select(ID, OA, Age, Male)
# Load data on ethnicity.
Ethnicity_by_OA_Manchester <- read_csv(here("data","Ethnicity_by_OA_Manchester_replicate.csv"))
# Join the OA-level sex data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Ethnicity_by_OA_Manchester, by = "OA")
# Create ethnicity for resident (white or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(White = rbinom(n = N, size = 1, prob = Mean_white)) %>%
select(ID, OA, Age, Male, White)
# Load data on income.
Income_by_OA_Manchester <- read_csv(here("data","Income_by_OA_Manchester_replicate.csv"))
# Join the OA-level income data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Income_by_OA_Manchester, by = "OA")
# Create income for resident (income or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(No_income = rbinom(n = N, size = 1, prob = mean_no_income)) %>%
select(ID, OA, Age, Male, White, No_income)
# Load data on income.
Edu_by_OA_Manchester <- read_csv(here("data","Edu_by_OA_Manchester_replicate.csv"))
# Join the OA-level education data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Edu_by_OA_Manchester, by = "OA")
# Create education for resident (Level 4 or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(High_edu = rbinom(n = N, size = 1, prob = Mean_level4_edu)) %>%
select(ID, OA, Age, Male, White, No_income, High_edu)
# Load in CSEW nvf data
load(here("data","csew_apr11mar12_nvf.Rdata"))
# Missings age for those over 120 years old.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(age = ifelse(test = age > 120, yes = NA, no = age))
# Recode sex female from 2 to 0
csew <- csew %>%
mutate(sex = if_else(condition = sex == 2, true = 0, false = sex))
# Recode ethnicity in CSEW
csew <- csew %>%
mutate(reseth = if_else(condition = reseth != 1, true = 0, false = reseth))
# Missings for some work2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(work2 = ifelse(test = work2 > 3, yes = NA, no = work2),
work2 = if_else(condition = work2 == 2, true = 0, false = work2))
# Recode employment.
csew <- csew %>%
mutate(remploy = if_else(condition = remploy == 2 | remploy == 3, true = 1, false = 0))
# Missings for some educat2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(educat2 = ifelse(test = educat2 > 10, yes = NA, no = educat2),
educat2 = if_else(condition = educat2 == 1 | educat2 == 2 | educat2 == 3, true = 1, false = 0))
# Data handling to crime categories: replace missings with zeros and then sum to create new categories.
csew <- csew %>%
replace_na(replace = list(nmotthef = 0, nmotstol = 0, ncardam  = 0, nbikthef = 0,
nprevthe = 0, nprevdam = 0, nprevtry = 0, nprevsto = 0,
nproside = 0, nprdefac = 0, nhomthef = 0, nyrhthef = 0,
nyrhodam = 0, nyrhotry = 0, nyrhosto = 0, nyroside = 0,
nyrdefac = 0, npersth  = 0, ntrypers = 0, noththef = 0,
ndelibda = 0, ndelibv  = 0, nthrevio = 0, nsexatt  = 0,
nhhldvio = 0)) %>%
mutate(vehicle    = nmotthef + nmotstol + ncardam,
residence  = nprevthe + nprevdam + nprevtry + nprevsto + nproside + nprdefac +
nhomthef + nyrhthef + nyrhodam + nyrhotry + nyrhosto + nyroside + nyrdefac,
theft      = npersth  + ntrypers + noththef + nbikthef,
theft_dam  = theft    + ndelibda,
violence   = ndelibv  + nthrevio  + nsexatt + nhhldvio,
all_crimes = vehicle  + residence + theft + ndelibda + violence)
# Run negative binomial models to generate estimates from CSEW.
model_vehicle <- glm.nb(vehicle ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_vehicle)
#PseudoR2(model_vehicle)
rsq.n(model_vehicle)
RMSE(model_vehicle)/(max(csew$vehicle)-min(csew$vehicle))
RMSE(model_residence)/(max(csew$residence)-min(csew$residence))
model_residence <- glm.nb(residence ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_residence)
#PseudoR2(model_residence)
rsq.n(model_residence)
RMSE(model_residence)/(max(csew$residence)-min(csew$residence))
model_theft <- glm.nb(theft ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_theft)
#PseudoR2(model_theft)
rsq.n(model_theft)
RMSE(model_theft)/(max(csew$theft)-min(csew$theft))
model_violence <- glm.nb(violence ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_violence)
#PseudoR2(model_violence)
rsq.n(model_violence)
RMSE(model_violence)/(max(csew$violence)-min(csew$violence))
model_all_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_all_crimes)
# Combine estimates for each crime type, assigning to a vector.
# Vehicle crime
eta_vehicle <- model_vehicle$coefficients[1] +
syn_res_OA$Age * model_vehicle$coefficients[2] +
syn_res_OA$Male * model_vehicle$coefficients[3] +
syn_res_OA$White * model_vehicle$coefficients[4] +
syn_res_OA$No_income * model_vehicle$coefficients[5] +
syn_res_OA$High_edu * model_vehicle$coefficients[6]
# Residence crime
eta_residence <- model_residence$coefficients[1] +
syn_res_OA$Age * model_residence$coefficients[2] +
syn_res_OA$Male * model_residence$coefficients[3] +
syn_res_OA$White * model_residence$coefficients[4] +
syn_res_OA$No_income * model_residence$coefficients[5] +
syn_res_OA$High_edu * model_residence$coefficients[6]
# Theft crime
eta_theft <- model_theft$coefficients[1] +
syn_res_OA$Age * model_theft$coefficients[2] +
syn_res_OA$Male * model_theft$coefficients[3] +
syn_res_OA$White * model_theft$coefficients[4] +
syn_res_OA$No_income * model_theft$coefficients[5] +
syn_res_OA$High_edu * model_theft$coefficients[6]
# Violent crime
eta_violence <- model_violence$coefficients[1] +
syn_res_OA$Age * model_violence$coefficients[2] +
syn_res_OA$Male * model_violence$coefficients[3] +
syn_res_OA$White * model_violence$coefficients[4] +
syn_res_OA$No_income * model_violence$coefficients[5] +
syn_res_OA$High_edu * model_violence$coefficients[6]
# Create distributions based on these estimates for the synthetic individual data.
syn_res_OA <-  syn_res_OA %>%
mutate(vehicle   = rnbinom(length(eta_vehicle)  , mu = exp(eta_vehicle)  , size = model_vehicle$theta),
residence = rnbinom(length(eta_residence), mu = exp(eta_residence), size = model_residence$theta),
theft     = rnbinom(length(eta_theft)    , mu = exp(eta_theft)    , size = model_theft$theta),
violence  = rnbinom(length(eta_violence) , mu = exp(eta_violence) , size = model_violence$theta))
# Load CSEW vf data
load(here("data","csew_apr11mar12_vf.Rdata"))
# Subset only those synthetic individuals who were victimised for vehicle crime.
syn_res_OA_veh <- syn_res_OA %>%
filter(vehicle != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_veh <- as.data.frame(lapply(syn_res_OA_veh, rep, syn_res_OA_veh$vehicle))
# Recode so vehicle is 1, else crime types 0.
Data_vehicle <- syn_res_OA_veh %>%
mutate(vehicle   = 1,
residence = 0,
theft     = 0,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for residence crime.
syn_res_OA_res <- syn_res_OA %>%
filter(residence != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_res <- as.data.frame(lapply(syn_res_OA_res, rep, syn_res_OA_res$residence))
# Recode so residence is 1, else crime types 0.
Data_residence <- syn_res_OA_res %>%
mutate(vehicle   = 0,
residence = 1,
theft     = 0,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for theft crime.
syn_res_OA_the <- syn_res_OA %>%
filter(theft != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_the <- as.data.frame(lapply(syn_res_OA_the, rep, syn_res_OA_the$theft))
# Recode so theft is 1, else crime types 0.
Data_theft <- syn_res_OA_the %>%
mutate(vehicle   = 0,
residence = 0,
theft     = 1,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for violence crime.
syn_res_OA_vio <- syn_res_OA %>%
filter(violence != 0)
# Repeat individuals as many times as they were victimised for violence.
syn_res_OA_vio <- as.data.frame(lapply(syn_res_OA_vio, rep, syn_res_OA_vio$violence))
# Recode so violence is 1, else crime types 0.
Data_violence <- syn_res_OA_vio %>%
mutate(vehicle   = 0,
residence = 0,
theft     = 0,
violence  = 1)
# Join csew with csew_vf. Warnings are not problematic.
csew_vf <- left_join(csew_vf, csew, by = "rowlabel")
# Recode copsknow variable to binary for regression model.
csew_vf <- csew_vf %>%
mutate(copsknow = if_else(condition = copsknow == 2, true = 0, false = copsknow),
copsknow = na_if(x = copsknow, 8),
copsknow = na_if(x = copsknow, 9))
# Recode victarea variable to binary for regression model.
csew_vf <- csew_vf %>%
mutate(victarea = if_else(condition = victarea == 2, true = 0, false = victarea),
victarea = na_if(x = victarea, 8),
victarea = na_if(x = victarea, 9))
# Filter vehicle crime types.
csew_vf_vehicle <-  csew_vf %>%
filter(crimtype == 1 | crimtype == 2 | crimtype == 3)
# Filter residence crime type.
csew_vf_residence <-  csew_vf %>%
filter(crimtype == 5  | crimtype == 6  | crimtype == 7  | crimtype == 8  |
crimtype == 9  | crimtype == 10 | crimtype == 11 | crimtype == 12 |
crimtype == 13 | crimtype == 14 | crimtype == 15 | crimtype == 16 |
crimtype == 17)
# Filter theft crime type.
csew_vf_theft <-  csew_vf %>%
filter(crimtype == 18 | crimtype == 19 | crimtype == 20 | crimtype == 4)
# Filter violence crime type.
csew_vf_violence <-  csew_vf %>%
filter(crimtype == 22 | crimtype == 23 | crimtype == 24 | crimtype == 25)
# Create GLM formula for predicting copsknow (dep. var.) with demographic variables (ind. var.).
glm_copsknow <- copsknow ~ age + sex + reseth + remploy + educat2
# Vehicle model.
model_repo_vehicle <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_vehicle)
summary(model_repo_vehicle)
View(csew_vf_vehicle)
#PseudoR2(model_repo_vehicle)
rsq.n(model_repo_vehicle)
RMSE(model_repo_vehicle)/(max(csew_vf_vehicle$copsknow)-min(csew_vf_vehicle$copsknow))
max(csew_vf_vehicle$copsknow)
summary(csew_vf_vehicle$copsknow)
RMSE(model_repo_vehicle)
BrierScore(model_repo_vehicle)
accuracy(model_repo_vehicle)
ROC(model_repo_vehicle)
accuracy(model_repo_vehicle)
summary(model_repo_vehicle)
?AUC
AUC(model_repo_vehicle)
BrierScore(model_repo_vehicle)
# Clear Global Environment.
rm(list = ls())
# To see everything in Console.
options(max.print=999999)
# Clear Global Environment.
rm(list = ls())
# Load packages required.
packages <- c("cowplot", "purrr"    , "devtools", "maptools",
"spdep"  , "DescTools", "MASS"    , "haven"   ,
"here"   , "readr"    , "dplyr"   , "tidyr"   ,
"forcats", "ggplot2"  , "sf"      , "classInt",
"rsq"    , "scales")
lapply(packages, require, character.only = TRUE)
# Load data on age.
Age_by_OA_Manchester <- read_csv(here("data","Age_by_OA_Manchester_replicate.csv"))
# Calculate number of residents in Manchester.
N <- sum(Age_by_OA_Manchester$Pop)
N
# Calculate number of Output Areas (OA).
D <- nrow(Age_by_OA_Manchester)
D
# Create a tibble with one row for each synthetic resident in Manchester.
# This will be filled with information later.
syn_res <- tibble(ID = 1:N)
# Assign each resident to an OA based on the size of the resident populations.
syn_res <- syn_res %>%
mutate(OA = rep.int(x = Age_by_OA_Manchester$OA, times = Age_by_OA_Manchester$Pop))
# Join the OA-level age data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res, Age_by_OA_Manchester, by = "OA")
# Create age for each resident based on this distribution.
# Seed is set for replication.
set.seed(500)
syn_res_OA <- syn_res_OA %>%
mutate(Age = rnorm(n = N, mean = syn_res_OA$mean_age_OA, sd = syn_res_OA$sd_age_OA)) %>%
select(ID, OA, Age)
# Load data on sex.
Sex_by_OA_Manchester <- read_csv(here("data","Sex_by_OA_Manchester_replicate.csv"))
# Join the OA-level sex data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Sex_by_OA_Manchester, by = "OA")
# Create sex for each resident based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(Male = rbinom(n = N, size = 1, prob = Mean_male)) %>%
select(ID, OA, Age, Male)
# Load data on ethnicity.
Ethnicity_by_OA_Manchester <- read_csv(here("data","Ethnicity_by_OA_Manchester_replicate.csv"))
# Join the OA-level sex data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Ethnicity_by_OA_Manchester, by = "OA")
# Create ethnicity for resident (white or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(White = rbinom(n = N, size = 1, prob = Mean_white)) %>%
select(ID, OA, Age, Male, White)
# Load data on income.
Income_by_OA_Manchester <- read_csv(here("data","Income_by_OA_Manchester_replicate.csv"))
# Join the OA-level income data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Income_by_OA_Manchester, by = "OA")
# Create income for resident (income or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(No_income = rbinom(n = N, size = 1, prob = mean_no_income)) %>%
select(ID, OA, Age, Male, White, No_income)
# Load data on income.
Edu_by_OA_Manchester <- read_csv(here("data","Edu_by_OA_Manchester_replicate.csv"))
# Join the OA-level education data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Edu_by_OA_Manchester, by = "OA")
# Create education for resident (Level 4 or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(High_edu = rbinom(n = N, size = 1, prob = Mean_level4_edu)) %>%
select(ID, OA, Age, Male, White, No_income, High_edu)
# Load in CSEW nvf data
load(here("data","csew_apr11mar12_nvf.Rdata"))
# Missings age for those over 120 years old.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(age = ifelse(test = age > 120, yes = NA, no = age))
# Recode sex female from 2 to 0
csew <- csew %>%
mutate(sex = if_else(condition = sex == 2, true = 0, false = sex))
# Recode ethnicity in CSEW
csew <- csew %>%
mutate(reseth = if_else(condition = reseth != 1, true = 0, false = reseth))
# Missings for some work2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(work2 = ifelse(test = work2 > 3, yes = NA, no = work2),
work2 = if_else(condition = work2 == 2, true = 0, false = work2))
# Recode employment.
csew <- csew %>%
mutate(remploy = if_else(condition = remploy == 2 | remploy == 3, true = 1, false = 0))
# Missings for some educat2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(educat2 = ifelse(test = educat2 > 10, yes = NA, no = educat2),
educat2 = if_else(condition = educat2 == 1 | educat2 == 2 | educat2 == 3, true = 1, false = 0))
# Data handling to crime categories: replace missings with zeros and then sum to create new categories.
csew <- csew %>%
replace_na(replace = list(nmotthef = 0, nmotstol = 0, ncardam  = 0, nbikthef = 0,
nprevthe = 0, nprevdam = 0, nprevtry = 0, nprevsto = 0,
nproside = 0, nprdefac = 0, nhomthef = 0, nyrhthef = 0,
nyrhodam = 0, nyrhotry = 0, nyrhosto = 0, nyroside = 0,
nyrdefac = 0, npersth  = 0, ntrypers = 0, noththef = 0,
ndelibda = 0, ndelibv  = 0, nthrevio = 0, nsexatt  = 0,
nhhldvio = 0)) %>%
mutate(vehicle    = nmotthef + nmotstol + ncardam,
residence  = nprevthe + nprevdam + nprevtry + nprevsto + nproside + nprdefac +
nhomthef + nyrhthef + nyrhodam + nyrhotry + nyrhosto + nyroside + nyrdefac,
theft      = npersth  + ntrypers + noththef + nbikthef,
theft_dam  = theft    + ndelibda,
violence   = ndelibv  + nthrevio  + nsexatt + nhhldvio,
all_crimes = vehicle  + residence + theft + ndelibda + violence)
model_vehicle <- glm.nb(vehicle ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_vehicle)
#PseudoR2(model_vehicle)
rsq.n(model_vehicle)
RMSE(model_vehicle)/(max(csew$vehicle)-min(csew$vehicle))
model_residence <- glm.nb(residence ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_residence)
#PseudoR2(model_residence)
rsq.n(model_residence)
RMSE(model_residence)/(max(csew$residence)-min(csew$residence))
model_theft <- glm.nb(theft ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_theft)
#PseudoR2(model_theft)
rsq.n(model_theft)
RMSE(model_theft)/(max(csew$theft)-min(csew$theft))
model_violence <- glm.nb(violence ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_violence)
#PseudoR2(model_violence)
rsq.n(model_violence)
RMSE(model_violence)/(max(csew$violence)-min(csew$violence))
model_all_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_all_crimes)
# Combine estimates for each crime type, assigning to a vector.
# Vehicle crime
eta_vehicle <- model_vehicle$coefficients[1] +
syn_res_OA$Age * model_vehicle$coefficients[2] +
syn_res_OA$Male * model_vehicle$coefficients[3] +
syn_res_OA$White * model_vehicle$coefficients[4] +
syn_res_OA$No_income * model_vehicle$coefficients[5] +
syn_res_OA$High_edu * model_vehicle$coefficients[6]
# Residence crime
eta_residence <- model_residence$coefficients[1] +
syn_res_OA$Age * model_residence$coefficients[2] +
syn_res_OA$Male * model_residence$coefficients[3] +
syn_res_OA$White * model_residence$coefficients[4] +
syn_res_OA$No_income * model_residence$coefficients[5] +
syn_res_OA$High_edu * model_residence$coefficients[6]
# Theft crime
eta_theft <- model_theft$coefficients[1] +
syn_res_OA$Age * model_theft$coefficients[2] +
syn_res_OA$Male * model_theft$coefficients[3] +
syn_res_OA$White * model_theft$coefficients[4] +
syn_res_OA$No_income * model_theft$coefficients[5] +
syn_res_OA$High_edu * model_theft$coefficients[6]
# Violent crime
eta_violence <- model_violence$coefficients[1] +
syn_res_OA$Age * model_violence$coefficients[2] +
syn_res_OA$Male * model_violence$coefficients[3] +
syn_res_OA$White * model_violence$coefficients[4] +
syn_res_OA$No_income * model_violence$coefficients[5] +
syn_res_OA$High_edu * model_violence$coefficients[6]
# Create distributions based on these estimates for the synthetic individual data.
syn_res_OA <-  syn_res_OA %>%
mutate(vehicle   = rnbinom(length(eta_vehicle)  , mu = exp(eta_vehicle)  , size = model_vehicle$theta),
residence = rnbinom(length(eta_residence), mu = exp(eta_residence), size = model_residence$theta),
theft     = rnbinom(length(eta_theft)    , mu = exp(eta_theft)    , size = model_theft$theta),
violence  = rnbinom(length(eta_violence) , mu = exp(eta_violence) , size = model_violence$theta))
# Load CSEW vf data
load(here("data","csew_apr11mar12_vf.Rdata"))
# Subset only those synthetic individuals who were victimised for vehicle crime.
syn_res_OA_veh <- syn_res_OA %>%
filter(vehicle != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_veh <- as.data.frame(lapply(syn_res_OA_veh, rep, syn_res_OA_veh$vehicle))
# Recode so vehicle is 1, else crime types 0.
Data_vehicle <- syn_res_OA_veh %>%
mutate(vehicle   = 1,
residence = 0,
theft     = 0,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for residence crime.
syn_res_OA_res <- syn_res_OA %>%
filter(residence != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_res <- as.data.frame(lapply(syn_res_OA_res, rep, syn_res_OA_res$residence))
# Recode so residence is 1, else crime types 0.
Data_residence <- syn_res_OA_res %>%
mutate(vehicle   = 0,
residence = 1,
theft     = 0,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for theft crime.
syn_res_OA_the <- syn_res_OA %>%
filter(theft != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_the <- as.data.frame(lapply(syn_res_OA_the, rep, syn_res_OA_the$theft))
# Recode so theft is 1, else crime types 0.
Data_theft <- syn_res_OA_the %>%
mutate(vehicle   = 0,
residence = 0,
theft     = 1,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for violence crime.
syn_res_OA_vio <- syn_res_OA %>%
filter(violence != 0)
# Repeat individuals as many times as they were victimised for violence.
syn_res_OA_vio <- as.data.frame(lapply(syn_res_OA_vio, rep, syn_res_OA_vio$violence))
# Recode so violence is 1, else crime types 0.
Data_violence <- syn_res_OA_vio %>%
mutate(vehicle   = 0,
residence = 0,
theft     = 0,
violence  = 1)
# Join csew with csew_vf. Warnings are not problematic.
csew_vf <- left_join(csew_vf, csew, by = "rowlabel")
# Recode copsknow variable to binary for regression model.
csew_vf <- csew_vf %>%
mutate(copsknow = if_else(condition = copsknow == 2, true = 0, false = copsknow),
copsknow = na_if(x = copsknow, 8),
copsknow = na_if(x = copsknow, 9))
# Recode victarea variable to binary for regression model.
csew_vf <- csew_vf %>%
mutate(victarea = if_else(condition = victarea == 2, true = 0, false = victarea),
victarea = na_if(x = victarea, 8),
victarea = na_if(x = victarea, 9))
# Filter vehicle crime types.
csew_vf_vehicle <-  csew_vf %>%
filter(crimtype == 1 | crimtype == 2 | crimtype == 3)
# Filter residence crime type.
csew_vf_residence <-  csew_vf %>%
filter(crimtype == 5  | crimtype == 6  | crimtype == 7  | crimtype == 8  |
crimtype == 9  | crimtype == 10 | crimtype == 11 | crimtype == 12 |
crimtype == 13 | crimtype == 14 | crimtype == 15 | crimtype == 16 |
crimtype == 17)
# Filter theft crime type.
csew_vf_theft <-  csew_vf %>%
filter(crimtype == 18 | crimtype == 19 | crimtype == 20 | crimtype == 4)
# Filter violence crime type.
csew_vf_violence <-  csew_vf %>%
filter(crimtype == 22 | crimtype == 23 | crimtype == 24 | crimtype == 25)
# Create GLM formula for predicting copsknow (dep. var.) with demographic variables (ind. var.).
glm_copsknow <- copsknow ~ age + sex + reseth + remploy + educat2
# Vehicle model.
model_repo_vehicle <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_vehicle)
summary(model_repo_vehicle)
#PseudoR2(model_repo_vehicle)
rsq.n(model_repo_vehicle)
BrierScore(model_repo_vehicle)
mean((predict(model_repo_vehicle,type='response')-csew_vf_vehicle$copsknow)^2)
predict(model_repo_vehicle,type='response')
BrierScore(model_repo_vehicle)
train_vehicle <- createDataPartition(csew_vf_vehicle$copsknow, p = .67,
list = FALSE,
times = 1)
log_predict <- predict(model_repo_vehicle, type = "response")
log_predict <- ifelse(log_predict > 0.5,1,0)
log_predict
table(log_predict)
install.packages("LogisticDx")
library(logisticDx)
library(logisticDx)
library(LogisticDx)
logiGOF(model_repo_vehicle)
library(LogisticDx)
warnings()
# Residence model.
model_repo_residence <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_residence)
logiGOF(model_repo_vehicle)
library(LogisticDx)
gof(model_repo_vehicle)
?glm
# Vehicle model.
model_repo_vehicle <- glm(formula = glm_copsknow, family = binomial(link = "logit"), na.action = na.omit, data = csew_vf_vehicle)
summary(model_repo_vehicle)
gof(model_repo_vehicle)
?gof
gof(unclass(model_repo_vehicle))
install.packages("generalhoslem")
library(generalhoslem)
logitgof(csew_vf_vehicle$copsknow, fitted(model_repo_vehicle))
logitgof(csew_vf_vehicle$copsknow, fitted(model_repo_vehicle, outcome = FALSE))
table(csew_vf_vehicle$copsknow, predict(model_repo_vehicle) > 0.5)
csew_vf_vehicle$copsknow,
predict(model_repo_vehicle)
csew_vf_vehicle$copsknow
Summary(model_repo_vehicle)
print(model_repo_vehicle)
anova(model_repo_vehicle, test=c("LR"))
library(carData)
hoslem.test(csew_vf_vehicle$copsknow, fitted(model_repo_vehicle), g=5)
