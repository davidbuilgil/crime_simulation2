p2 <- ggplot(data = lsoa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "LSOA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# MSOA plot.
p3 <- ggplot(data = msoa_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "MSOA") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Ward plot.
p4 <- ggplot(data = ward_levels_sf) +
geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") +
theme_void() +
scale_fill_manual(values = c("#969696", "#636363")) +
labs(fill = "RD %", title = "Ward") +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.text.y = element_blank())
# Plot just to get legend.
leg <- ggplot(data = oa_levels_sf) + theme_minimal() + geom_sf(mapping = aes(fill = RD_cut), colour = "transparent") + scale_fill_manual(values = greypal) + labs(fill = "RD %") + theme(legend.position = "bottom")
leg_p <- get_legend(leg)
# Arrange plots.
maps_plot <- plot_grid(p1, p2, p3, p4, nrow = 1)
full_plot <- plot_grid(maps_plot, leg_p, nrow = 2)
ggsave(plot = full_plot, filename = "visuals/map_comaprison_RD.png", height = 24, width = 24, unit = "cm")
# Compute correlations between crimes known to police (simulated data) and crime recorded by GMP (direct aggregates).
cor_oa_df <- oa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_oa_df
cor_lsoa_df <- lsoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_lsoa_df
cor_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_msoa_df
cor_ward_df <- ward_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, GMP_agg, method = "spearman")$estimate,
p    = cor.test(known, GMP_agg, method = "spearman")$p.value)
cor_ward_df
# Compute correlations between crimes known to police (simulated data) and crime recorded by GMP (points in polygons).
cor_oa_df <- oa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_oa_df
cor_lsoa_df <- lsoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_lsoa_df
cor_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_msoa_df
cor_ward_df <- ward_compare_df %>%
group_by(crime_type) %>%
summarise(corr = cor.test(known, count, method = "spearman")$estimate,
p    = cor.test(known, count, method = "spearman")$p.value)
cor_ward_df
# Regain spatial attributes.
oa_compare_sf_list   <- lapply(oa_compare_list  , function(x) st_as_sf(x))
lsoa_compare_sf_list <- lapply(lsoa_compare_list, function(x) st_as_sf(x))
msoa_compare_sf_list <- lapply(msoa_compare_list, function(x) st_as_sf(x))
ward_compare_sf_list <- lapply(ward_compare_list, function(x) st_as_sf(x))
# Proximity matrix function to compute Local Moran's I.
# Adjust tolerance to avoid errenous 'no neighbours'. The figure 1e-005 used based on default in GeoDa 1.14.
prox_fun <- function(x) {
temp <- poly2nb(x, row.names = x$unit, snap = 1e-005)
nb2listw(temp)
}
# Run for each spatial scale (any one of the elements in the list will do).
oa_prox   <- prox_fun(oa_compare_sf_list  [[1]])
lsoa_prox <- prox_fun(lsoa_compare_sf_list[[1]])
msoa_prox <- prox_fun(msoa_compare_sf_list[[1]])
ward_prox <- prox_fun(ward_compare_sf_list[[1]])
# Check neighours stats compared to GeoDa. Results are either identical or very similar.
oa_prox$neighbours
lsoa_prox$neighbours
msoa_prox$neighbours
ward_prox$neighbours
# Global Morans'I.
#mi_oa_df <- oa_compare_df %>%
#  group_by(crime_type) %>%
#  summarise(mi   = lm.morantest.exact(lm(known ~ count), oa_prox)$estimate,
#            stat = lm.morantest.exact(lm(known ~ count), oa_prox)$statistic,
#            p    = lm.morantest.exact(lm(known ~ count), oa_prox)$p.value)
#mi_oa_df
#mi_oa_df <- oa_compare_df %>%
#  group_by(crime_type) %>%
#  summarise(mi   = lm.morantest.exact(lm(known ~ GMP_agg), oa_prox)$estimate,
#            stat = lm.morantest.exact(lm(known ~ GMP_agg), oa_prox)$statistic,
#            p    = lm.morantest.exact(lm(known ~ GMP_agg), oa_prox)$p.value)
mi_lsoa_df <- lsoa_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ count), lsoa_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ count), lsoa_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ count), lsoa_prox)$p.value)
mi_lsoa_df
mi_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ count), msoa_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ count), msoa_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ count), msoa_prox)$p.value)
mi_msoa_df
mi_msoa_df <- msoa_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ GMP_agg), msoa_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ GMP_agg), msoa_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ GMP_agg), msoa_prox)$p.value)
mi_ward_df <- ward_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ count), ward_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ count), ward_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ count), ward_prox)$p.value)
mi_ward_df
mi_ward_df <- ward_compare_df %>%
group_by(crime_type) %>%
summarise(mi   = lm.morantest.exact(lm(known ~ GMP_agg), ward_prox)$estimate,
stat = lm.morantest.exact(lm(known ~ GMP_agg), ward_prox)$statistic,
p    = lm.morantest.exact(lm(known ~ GMP_agg), ward_prox)$p.value)
# Empirical evaluation of simulated dataset from CSEW data
# Count crimes in units.
syn_res_units <- Data_crimes %>%
group_by(ID) %>%
summarise(vehicle.a = sum(vehicle),
residence.a = sum(residence),
theft.a = sum(theft),
violence.a = sum(violence))
# Merge crimes in units with synthetic population.
syn_res_OA <- left_join(syn_res_OA, syn_res_units, by = "ID")
# Replace NAs with 0.
syn_res_OA <- syn_res_OA %>%
mutate_at(vars(vehicle.a, residence.a, theft.a, violence.a), ~tidyr::replace_na(., 0)) %>%
filter(Age > 16)
# Create three agre groups - CSEW data.
csew$age_rec <- NA
csew$age_rec[csew$age < 36] <- "less35"
csew$age_rec[csew$age >= 36 & csew$age < 56] <- "36to55"
csew$age_rec[csew$age >= 56] <- "56more"
# Create three age groups - simulated data.
syn_res_OA$age_rec <- NA
syn_res_OA$age_rec[syn_res_OA$Age >= 16 & syn_res_OA$Age < 36] <- "less35"
syn_res_OA$age_rec[syn_res_OA$Age >= 36 & syn_res_OA$Age < 56] <- "36to55"
syn_res_OA$age_rec[syn_res_OA$Age >= 56] <- "56more"
# Mean of vehicle crime victimisations by marriage status.
stats::weighted.mean(x = csew$vehicle[which(csew$marsta == 1)],
w = csew$IndivWgt[which(csew$marsta == 1)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$Married == 1)])
stats::weighted.mean(x = csew$vehicle[which(csew$marsta == 0)],
w = csew$IndivWgt[which(csew$marsta == 0)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$Married == 0)])
table(csew$cry2)
# Mean of vehicle crime victimisations by country of birth.
stats::weighted.mean(x = csew$vehicle[which(csew$cry2 == 1)],
w = csew$IndivWgt[which(csew$cry2 == 1)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$BornUK == 1)])
stats::weighted.mean(x = csew$vehicle[which(csew$cry2 == 0)],
w = csew$IndivWgt[which(csew$cry2 == 0)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$BornUK == 0)])
# Mean of vehicle crime victimisations by IMD deciles.
stats::weighted.mean(x = csew$vehicle[which(csew$emdidec3 <= 3)],
w = csew$IndivWgt[which(csew$emdidec3 <= 3)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$IMD_rank <= 3)])
stats::weighted.mean(x = csew$vehicle[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
w = csew$IndivWgt[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$IMD_rank > 3 & syn_res_OA$IMD_rank < 7)])
stats::weighted.mean(x = csew$vehicle[which(csew$emdidec3 >= 7)],
w = csew$IndivWgt[which(csew$emdidec3 >= 7)],
na.rm = T)
mean(x = syn_res_OA$vehicle.a[which(syn_res_OA$IMD_rank >= 7)])
# Mean of residence crime victimisations by education level.
stats::weighted.mean(x = csew$residence[which(csew$educat2 == 1)],
w = csew$IndivWgt[which(csew$educat2 == 1)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$High_edu == 1)])
stats::weighted.mean(x = csew$residence[which(csew$educat2 == 0)],
w = csew$IndivWgt[which(csew$educat2 == 0)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$High_edu == 0)])
# Mean of residence crime victimisations by marriage status.
stats::weighted.mean(x = csew$residence[which(csew$marsta == 1)],
w = csew$IndivWgt[which(csew$marsta == 1)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$Married == 1)])
stats::weighted.mean(x = csew$residence[which(csew$marsta == 0)],
w = csew$IndivWgt[which(csew$marsta == 0)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$Married == 0)])
# Mean of residence crime victimisations by country of birth.
stats::weighted.mean(x = csew$residence[which(csew$cry2 == 1)],
w = csew$IndivWgt[which(csew$cry2 == 1)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$BornUK == 1)])
stats::weighted.mean(x = csew$residence[which(csew$cry2 == 0)],
w = csew$IndivWgt[which(csew$cry2 == 0)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$BornUK == 0)])
# Mean of residence crime victimisations by IMD deciles.
stats::weighted.mean(x = csew$residence[which(csew$emdidec3 <= 3)],
w = csew$IndivWgt[which(csew$emdidec3 <= 3)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$IMD_rank <= 3)])
stats::weighted.mean(x = csew$residence[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
w = csew$IndivWgt[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$IMD_rank > 3 & syn_res_OA$IMD_rank < 7)])
stats::weighted.mean(x = csew$residence[which(csew$emdidec3 >= 7)],
w = csew$IndivWgt[which(csew$emdidec3 >= 7)],
na.rm = T)
mean(x = syn_res_OA$residence.a[which(syn_res_OA$IMD_rank >= 7)])
# Mean of property crime victimisations by marriage status.
stats::weighted.mean(x = csew$theft[which(csew$marsta == 1)],
w = csew$IndivWgt[which(csew$marsta == 1)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$Married == 1)])
stats::weighted.mean(x = csew$theft[which(csew$marsta == 0)],
w = csew$IndivWgt[which(csew$marsta == 0)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$Married == 0)])
# Mean of property crime victimisations by country of birth.
stats::weighted.mean(x = csew$theft[which(csew$cry2 == 1)],
w = csew$IndivWgt[which(csew$cry2 == 1)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$BornUK == 1)])
stats::weighted.mean(x = csew$theft[which(csew$cry2 == 0)],
w = csew$IndivWgt[which(csew$cry2 == 0)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$BornUK == 0)])
# Mean of property crime victimisations by IMD deciles.
stats::weighted.mean(x = csew$theft[which(csew$emdidec3 <= 3)],
w = csew$IndivWgt[which(csew$emdidec3 <= 3)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$IMD_rank <= 3)])
stats::weighted.mean(x = csew$theft[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
w = csew$IndivWgt[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$IMD_rank > 3 & syn_res_OA$IMD_rank < 7)])
stats::weighted.mean(x = csew$theft[which(csew$emdidec3 >= 7)],
w = csew$IndivWgt[which(csew$emdidec3 >= 7)],
na.rm = T)
mean(x = syn_res_OA$theft.a[which(syn_res_OA$IMD_rank >= 7)])
# Mean of violence crime victimisations by marriage status.
stats::weighted.mean(x = csew$violence[which(csew$marsta == 1)],
w = csew$IndivWgt[which(csew$marsta == 1)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$Married == 1)])
stats::weighted.mean(x = csew$violence[which(csew$marsta == 0)],
w = csew$IndivWgt[which(csew$marsta == 0)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$Married == 0)])
# Mean of violence crime victimisations by country of birth.
stats::weighted.mean(x = csew$violence[which(csew$cry2 == 1)],
w = csew$IndivWgt[which(csew$cry2 == 1)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$BornUK == 1)])
stats::weighted.mean(x = csew$violence[which(csew$cry2 == 0)],
w = csew$IndivWgt[which(csew$cry2 == 0)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$BornUK == 0)])
# Mean of violence crime victimisations by IMD deciles.
stats::weighted.mean(x = csew$violence[which(csew$emdidec3 <= 3)],
w = csew$IndivWgt[which(csew$emdidec3 <= 3)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$IMD_rank <= 3)])
stats::weighted.mean(x = csew$violence[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
w = csew$IndivWgt[which(csew$emdidec3 > 3 & csew$emdidec3 < 7)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$IMD_rank > 3 & syn_res_OA$IMD_rank < 7)])
stats::weighted.mean(x = csew$violence[which(csew$emdidec3 >= 7)],
w = csew$IndivWgt[which(csew$emdidec3 >= 7)],
na.rm = T)
mean(x = syn_res_OA$violence.a[which(syn_res_OA$IMD_rank >= 7)])
# Create three age groups for vehicle crime dataset.
csew_vf_vehicle$age_rec <- NA
csew_vf_vehicle$age_rec[csew_vf_vehicle$age < 36] <- "less35"
csew_vf_vehicle$age_rec[csew_vf_vehicle$age >= 36 & csew_vf_vehicle$age < 56] <- "36to55"
csew_vf_vehicle$age_rec[csew_vf_vehicle$age >= 56] <- "56more"
Data_crimes$age_rec[Data_crimes$Age >= 16 & Data_crimes$Age < 36] <- "less35"
Data_crimes$age_rec[Data_crimes$Age >= 36 & Data_crimes$Age < 56] <- "36to55"
Data_crimes$age_rec[Data_crimes$Age >= 56] <- "56more"
# Mean of crime reporting for vehicle crimes by age.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$age_rec == "less35")],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$age_rec == "less35")],
na.rm = T)
# Mean of crime reporting for vehicle crimes by marriage status.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$marsta == 1)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$marsta == 0)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for vehicle crimes by country of birth.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$cry2 == 1)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$BornUK == 1)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$cry2 == 0)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$cry2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$BornUK == 0)])
# Mean of crime reporting for vehicle crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$emdidec3 <= 3)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$IMD_rank <= 3)])
# Mean of crime reporting for vehicle crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$emdidec3 <= 3)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$emdidec3 > 3 & csew_vf_vehicle$emdidec3 < 7)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$emdidec3 > 3 & csew_vf_vehicle$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$emdidec3 >= 7)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$IMD_rank >= 7)])
# Create three age groups for residence crime data.
csew_vf_residence$age_rec <- NA
csew_vf_residence$age_rec[csew_vf_residence$age < 36] <- "less35"
csew_vf_residence$age_rec[csew_vf_residence$age >= 36 & csew_vf_residence$age < 56] <- "36to55"
csew_vf_residence$age_rec[csew_vf_residence$age >= 56] <- "56more"
# Mean of crime reporting for residence crimes by marriage status.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$marsta == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$marsta == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for residence crimes by marriage status.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$marsta == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$marsta == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for residence crimes by country of birth.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$cry2 == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$BornUK == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$cry2 == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$cry2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$BornUK == 0)])
# Mean of crime reporting for residence crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 <= 3)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 >= 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank >= 7)])
# Mean of crime reporting for residence crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 <= 3)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 >= 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank >= 7)])
# Create three age groups for property crime data.
csew_vf_theft$age_rec <- NA
csew_vf_theft$age_rec[csew_vf_theft$age < 36] <- "less35"
csew_vf_theft$age_rec[csew_vf_theft$age >= 36 & csew_vf_theft$age < 56] <- "36to55"
csew_vf_theft$age_rec[csew_vf_theft$age >= 56] <- "56more"
# Mean of crime reporting for property crimes by marriage status.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$marsta == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$marsta == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for property crimes by country of birth.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$cry2 == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$BornUK == 1)])
# Mean of crime reporting for property crimes by country of birth.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$cry2 == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$BornUK == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$cry2 == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$cry2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$BornUK == 0)])
# Mean of crime reporting for property crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$emdidec3 <= 3)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$emdidec3 > 3 & csew_vf_theft$emdidec3 < 7)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$emdidec3 > 3 & csew_vf_theft$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$emdidec3 >= 7)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$IMD_rank >= 7)])
#Create three age groups for violent crimes data.
csew_vf_violence$age_rec <- NA
csew_vf_violence$age_rec[csew_vf_violence$age < 36] <- "less35"
csew_vf_violence$age_rec[csew_vf_violence$age >= 36 & csew_vf_violence$age < 56] <- "36to55"
csew_vf_violence$age_rec[csew_vf_violence$age >= 56] <- "56more"
# Mean of crime reporting for violence crimes by marriage status.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$marsta == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$marsta == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for violence crimes by country of birth.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$cry2 == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$BornUK == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$cry2 == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$cry2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$BornUK == 0)])
# Mean of crime reporting for violence crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$emdidec3 <= 3)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$emdidec3 > 3 & csew_vf_violence$emdidec3 < 7)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$emdidec3 > 3 & csew_vf_violence$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$emdidec3 >= 7)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$IMD_rank >= 7)])
