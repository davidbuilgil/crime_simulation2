mean(x = syn_res_OA$residence[which(syn_res_OA$No_income == 0)])
# Mean of residence crime victimisations by education level.
stats::weighted.mean(x = csew$residence[which(csew$educat2 == 1)],
w = csew$IndivWgt[which(csew$educat2 == 1)],
na.rm = T)
mean(x = syn_res_OA$residence[which(syn_res_OA$High_edu == 1)])
stats::weighted.mean(x = csew$residence[which(csew$educat2 == 0)],
w = csew$IndivWgt[which(csew$educat2 == 0)],
na.rm = T)
mean(x = syn_res_OA$residence[which(syn_res_OA$High_edu == 0)])
# Mean of property crime victimisations by age.
stats::weighted.mean(x = csew$theft[which(csew$age_rec == "less35")],
w = csew$IndivWgt[which(csew$age_rec == "less35")],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$age_rec == "less35")])
stats::weighted.mean(x = csew$theft[which(csew$age_rec == "36to55")],
w = csew$IndivWgt[which(csew$age_rec == "36to55")],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$age_rec == "36to55")])
stats::weighted.mean(x = csew$theft[which(csew$age_rec == "56more")],
w = csew$IndivWgt[which(csew$age_rec == "56more")],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$age_rec == "56more")])
# Mean of property crime victimisations by sex.
stats::weighted.mean(x = csew$theft[which(csew$sex == 1)],
w = csew$IndivWgt[which(csew$sex == 1)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$Male == 1)])
stats::weighted.mean(x = csew$theft[which(csew$sex == 0)],
w = csew$IndivWgt[which(csew$sex == 0)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$Male == 0)])
# Mean of property crime victimisations by ethnic group.
stats::weighted.mean(x = csew$theft[which(csew$reseth == 1)],
w = csew$IndivWgt[which(csew$reseth == 1)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$White == 1)])
stats::weighted.mean(x = csew$theft[which(csew$reseth == 0)],
w = csew$IndivWgt[which(csew$reseth == 0)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$White == 0)])
# Mean of property crime victimisations by employment status.
stats::weighted.mean(x = csew$theft[which(csew$remploy == 1)],
w = csew$IndivWgt[which(csew$remploy == 1)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$No_income == 1)])
stats::weighted.mean(x = csew$theft[which(csew$remploy == 0)],
w = csew$IndivWgt[which(csew$remploy == 0)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$No_income == 0)])
# Mean of property crime victimisations by education level.
stats::weighted.mean(x = csew$theft[which(csew$educat2 == 1)],
w = csew$IndivWgt[which(csew$educat2 == 1)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$High_edu == 1)])
stats::weighted.mean(x = csew$theft[which(csew$educat2 == 0)],
w = csew$IndivWgt[which(csew$educat2 == 0)],
na.rm = T)
mean(x = syn_res_OA$theft[which(syn_res_OA$High_edu == 0)])
# Mean of violent crime victimisations by age.
stats::weighted.mean(x = csew$violence[which(csew$age_rec == "less35")],
w = csew$IndivWgt[which(csew$age_rec == "less35")],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$age_rec == "less35")])
stats::weighted.mean(x = csew$violence[which(csew$age_rec == "36to55")],
w = csew$IndivWgt[which(csew$age_rec == "36to55")],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$age_rec == "36to55")])
stats::weighted.mean(x = csew$violence[which(csew$age_rec == "56more")],
w = csew$IndivWgt[which(csew$age_rec == "56more")],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$age_rec == "56more")])
# Mean of violent crime victimisations by sex.
stats::weighted.mean(x = csew$violence[which(csew$sex == 1)],
w = csew$IndivWgt[which(csew$sex == 1)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$Male == 1)])
stats::weighted.mean(x = csew$violence[which(csew$sex == 0)],
w = csew$IndivWgt[which(csew$sex == 0)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$Male == 0)])
# Mean of violent crime victimisations by ethnic group.
stats::weighted.mean(x = csew$violence[which(csew$reseth == 1)],
w = csew$IndivWgt[which(csew$reseth == 1)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$White == 1)])
stats::weighted.mean(x = csew$violence[which(csew$reseth == 0)],
w = csew$IndivWgt[which(csew$reseth == 0)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$White == 0)])
# Mean of violent crime victimisations by employment status.
stats::weighted.mean(x = csew$violence[which(csew$remploy == 1)],
w = csew$IndivWgt[which(csew$remploy == 1)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$No_income == 1)])
stats::weighted.mean(x = csew$violence[which(csew$remploy == 0)],
w = csew$IndivWgt[which(csew$remploy == 0)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$No_income == 0)])
# Mean of violent crime victimisations by education level.
stats::weighted.mean(x = csew$violence[which(csew$educat2 == 1)],
w = csew$IndivWgt[which(csew$educat2 == 1)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$High_edu == 1)])
stats::weighted.mean(x = csew$violence[which(csew$educat2 == 0)],
w = csew$IndivWgt[which(csew$educat2 == 0)],
na.rm = T)
mean(x = syn_res_OA$violence[which(syn_res_OA$High_edu == 0)])
# Create three age groups for vehicle crime dataset.
csew_vf_vehicle$age_rec <- NA
csew_vf_vehicle$age_rec[csew_vf_vehicle$age < 36] <- "less35"
csew_vf_vehicle$age_rec[csew_vf_vehicle$age >= 36 & csew_vf_vehicle$age < 56] <- "36to55"
csew_vf_vehicle$age_rec[csew_vf_vehicle$age >= 56] <- "56more"
Data_crimes$age_rec[Data_crimes$Age >= 16 & Data_crimes$Age < 36] <- "less35"
Data_crimes$age_rec[Data_crimes$Age >= 36 & Data_crimes$Age < 56] <- "36to55"
Data_crimes$age_rec[Data_crimes$Age >= 56] <- "56more"
# Mean of crime reporting for vehicle crimes by age.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$age_rec == "less35")],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$age_rec == "less35")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle >= 1 &
Data_crimes$age_rec == "less35")])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$age_rec == "36to55")],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$age_rec == "36to55")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$age_rec == "36to55")])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$age_rec == "56more")],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$age_rec == "56more")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$age_rec == "56more")])
# Mean of crime reporting for vehicle crimes by sex.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$sex == 1)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$sex == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$Male == 1)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$sex == 0)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$sex == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$Male == 0)])
# Mean of crime reporting for vehicle crimes by ethnic group.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$reseth == 1)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$reseth == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$White == 1)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$reseth == 0)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$reseth == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$White == 0)])
# Mean of crime reporting for vehicle crimes by employment status.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$remploy == 1)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$remploy == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$No_income == 1)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$remploy == 0)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$remploy == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$No_income == 0)])
# Mean of crime reporting for vehicle crimes by education level.
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$educat2 == 1)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$educat2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$High_edu == 1)])
stats::weighted.mean(x = csew_vf_vehicle$copsknow[which(csew_vf_vehicle$educat2 == 0)],
w = csew_vf_vehicle$IndivWgt.x[which(csew_vf_vehicle$educat2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$vehicle == 1 &
Data_crimes$High_edu == 0)])
# Create three age groups for residence crime data.
csew_vf_residence$age_rec <- NA
csew_vf_residence$age_rec[csew_vf_residence$age < 36] <- "less35"
csew_vf_residence$age_rec[csew_vf_residence$age >= 36 & csew_vf_residence$age < 56] <- "36to55"
csew_vf_residence$age_rec[csew_vf_residence$age >= 56] <- "56more"
# Mean of crime reporting for residence crimes by age.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$age_rec == "less35")],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$age_rec == "less35")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence >= 1 &
Data_crimes$age_rec == "less35")])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$age_rec == "36to55")],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$age_rec == "36to55")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$age_rec == "36to55")])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$age_rec == "56more")],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$age_rec == "56more")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$age_rec == "56more")])
# Mean of crime reporting for residence crimes by sex.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$sex == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$sex == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$Male == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$sex == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$sex == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$Male == 0)])
# Mean of crime reporting for residence crimes by ethnic group.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$reseth == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$reseth == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$White == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$reseth == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$reseth == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$White == 0)])
# Mean of crime reporting for residence crimes by employment status.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$remploy == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$remploy == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$No_income == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$remploy == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$remploy == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$No_income == 0)])
# Mean of crime reporting for residence crimes by education level.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$educat2 == 1)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$educat2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$High_edu == 1)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$educat2 == 0)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$educat2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$High_edu == 0)])
# Create three age groups for property crime data.
csew_vf_theft$age_rec <- NA
csew_vf_theft$age_rec[csew_vf_theft$age < 36] <- "less35"
csew_vf_theft$age_rec[csew_vf_theft$age >= 36 & csew_vf_theft$age < 56] <- "36to55"
csew_vf_theft$age_rec[csew_vf_theft$age >= 56] <- "56more"
# Mean of crime reporting for property crimes by age.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$age_rec == "less35")],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$age_rec == "less35")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft >= 1 &
Data_crimes$age_rec == "less35")])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$age_rec == "36to55")],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$age_rec == "36to55")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$age_rec == "36to55")])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$age_rec == "56more")],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$age_rec == "56more")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$age_rec == "56more")])
# Mean of crime reporting for property crimes by sex.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$sex == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$sex == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$Male == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$sex == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$sex == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$Male == 0)])
# Mean of crime reporting for property crimes by ethnic group.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$reseth == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$reseth == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$White == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$reseth == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$reseth == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$White == 0)])
# Mean of crime reporting for property crimes by employment status.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$remploy == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$remploy == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$No_income == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$remploy == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$remploy == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$No_income == 0)])
# Mean of crime reporting for property crimes by education level.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$educat2 == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$educat2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$High_edu == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$educat2 == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$educat2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$High_edu == 0)])
#Create three age groups for violent crimes data.
csew_vf_violence$age_rec <- NA
csew_vf_violence$age_rec[csew_vf_violence$age < 36] <- "less35"
csew_vf_violence$age_rec[csew_vf_violence$age >= 36 & csew_vf_violence$age < 56] <- "36to55"
csew_vf_violence$age_rec[csew_vf_violence$age >= 56] <- "56more"
# Mean of crime reporting for violent crimes by age.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$age_rec == "less35")],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$age_rec == "less35")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence >= 1 &
Data_crimes$age_rec == "less35")])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$age_rec == "36to55")],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$age_rec == "36to55")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$age_rec == "36to55")])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$age_rec == "56more")],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$age_rec == "56more")],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$age_rec == "56more")])
# Mean of crime reporting for violent crimes by sex.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$sex == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$sex == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$Male == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$sex == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$sex == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$Male == 0)])
# Mean of crime reporting for violent crimes by ethnic group.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$reseth == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$reseth == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$White == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$reseth == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$reseth == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$White == 0)])
# Mean of crime reporting for violent crimes by employment status.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$remploy == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$remploy == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$No_income == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$remploy == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$remploy == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$No_income == 0)])
# Mean of crime reporting for violent crimes by education level.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$educat2 == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$educat2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$High_edu == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$educat2 == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$educat2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$High_edu == 0)])
# Append total crimes to the list.
GMP_all_list <- c((GMP_all_list), list(GMP_manc))
# Append total crimes to the list.
GMP_all_list <- append(GMP_all_list, GMP_manc)
# Append total crimes to the list.
GMP_all_list <- append(as.list(GMP_all_list), GMP_manc)
GMP_all_list <- c((as.list(GMP_all_list)), list(GMP_manc))
# Append total crimes to the list.
GMP_all_list <- append(as.list(GMP_all_list), GMP_manc)
GMP_all_list <- c((as.list(GMP_all_list)), list(GMP_manc))
# Rename elements of the list (order checked manually).
names(GMP_all_list) <- c("residence", "theft", "vehicle", "violent", "all_crimes")
View(GMP_all_list)
# Append total crimes to the list.
GMP_all_list <- append(as.list(GMP_all_list), GMP_manc)
View(GMP_all_list)
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Append total crimes to the list.
GMP_all_list <- append(as.list(GMP_all_list), GMP_manc)
# Rename elements of the list (order checked manually).
names(GMP_all_list) <- c("residence", "theft", "vehicle", "violent", "all_crimes")
View(GMP_all_list)
# Load crimes known to Greater Manchester Police in 2011/12.
GMP_all <- read_csv(here("data/GMP_all.csv"))
# Merge spatial information of wards.
GMP_manc <- GMP_all %>%
left_join(LSOA_to_ward, by = c("lsoa11cd" = "LSOA")) %>%
filter(ladnm == "Manchester")
# Recode crime types to match categories used thus far.
GMP_manc <- GMP_manc %>%
mutate(Crime.type = recode(Crime.type,
"Anti-social behaviour"       = "other",
"Burglary"                    = "residence",
"Criminal damage and arson"   = "residence",
"Drugs"                       = "other",
"Other crime"                 = "other",
"Other theft"                 = "theft",
"Public disorder and weapons" = "other",
"Robbery"                     = "theft",
"Shoplifting"                 = "other",
"Vehicle crime"               = "vehicle",
"Violent crime"               = "violent")) %>%
filter(Crime.type == "residence" | Crime.type == "theft" | Crime.type == "vehicle" | Crime.type == "violent")
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Append total crimes to the list.
GMP_all_list <- append(as.list(GMP_all_list), GMP_manc)
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Append total crimes to the list.
GMP_all_list <- append(GMP_all_list, GMP_manc)
# Append total crimes to the list.
GMP_all_list <- append(GMP_all_list, as.list(GMP_manc))
# Load crimes known to Greater Manchester Police in 2011/12.
GMP_all <- read_csv(here("data/GMP_all.csv"))
# Merge spatial information of wards.
GMP_manc <- GMP_all %>%
left_join(LSOA_to_ward, by = c("lsoa11cd" = "LSOA")) %>%
filter(ladnm == "Manchester")
# Recode crime types to match categories used thus far.
GMP_manc <- GMP_manc %>%
mutate(Crime.type = recode(Crime.type,
"Anti-social behaviour"       = "other",
"Burglary"                    = "residence",
"Criminal damage and arson"   = "residence",
"Drugs"                       = "other",
"Other crime"                 = "other",
"Other theft"                 = "theft",
"Public disorder and weapons" = "other",
"Robbery"                     = "theft",
"Shoplifting"                 = "other",
"Vehicle crime"               = "vehicle",
"Violent crime"               = "violent")) %>%
filter(Crime.type == "residence" | Crime.type == "theft" | Crime.type == "vehicle" | Crime.type == "violent")
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
GMP_all_list <- c((GMP_all_list), as.list(GMP_manc))
as.list(GMP_manc)
View(GMP_manc)
View(GMP_all_list)
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Rename elements of the list (order checked manually).
names(GMP_all_list) <- c("residence", "theft", "vehicle", "violent", "all_crimes")
# load packages
library(here)
library(readxl)
library(dplyr)
library(tidyr)
library(readr)
# load raw data
marriage_raw <- read_excel(here("data","nomis_2020_12_31_151943.xlsx"), skip = 8)
# clean var names
names(marriage_raw) <- gsub(pattern = " ", replacement = "_", x = names(marriage_raw))
View(marriage_raw)
marriage_raw$Married
# renaming, drop missings, then create 'mean' measure
marriage_raw <- marriage_raw %>%
rename(OA = `2011_output_area`,
Pop_marr = `All_usual_residents_aged_16+`,
Married = Married,
Civil = `In_a_registered_same-sex_civil_partnership`) %>%
drop_na(Pop_marr) %>%
mutate(Mean_married = (Married + Civil)/Pop_marr)
View(marriage_raw)
# load raw data
marriage_raw <- read_excel(here("data","nomis_2020_12_31_151943.xlsx"), skip = 8)
# clean var names
names(marriage_raw) <- gsub(pattern = " ", replacement = "_", x = names(marriage_raw))
# renaming, drop missings, then create 'mean' measure
marriage_mean <- marriage_raw %>%
rename(OA = `2011_output_area`,
Pop_marr = `All_usual_residents_aged_16+`,
Married = Married,
Civil = `In_a_registered_same-sex_civil_partnership`) %>%
drop_na(Pop_marr) %>%
mutate(Mean_married = (Married + Civil)/Pop_marr)
# save
write_csv(x = marriage_mean, path = here("data", "Marriage_by_OA_Manchester_replicate.csv"))
# load packages
library(here)
library(readxl)
library(dplyr)
library(tidyr)
library(readr)
# load raw data
bornuk_raw <- read_excel(here("data","nomis_2020_12_31_151501.xlsx"), skip = 8)
# clean var names
names(bornuk_raw) <- gsub(pattern = " ", replacement = "_", x = names(bornuk_raw))
View(bornuk_raw)
# renaming, drop missings, then create 'mean' measure
bornuk_mean <- bornuk_raw %>%
rename(OA = `2011_output_area`,
Pop = All_usual_residents,
UK = United_Kingdom) %>%
drop_na(Pop) %>%
mutate(Mean_bornUK = UK/Pop)
View(bornuk_mean)
# save
write_csv(x = bornuk_mean, path = here("data", "BornUK_by_OA_Manchester_replicate.csv"))
