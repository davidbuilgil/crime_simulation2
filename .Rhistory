summary(model_area_vehicle)
PseudoR2(model_area_vehicle)
# Residence model.
model_area_residence <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_residence)
summary(model_area_residence)
PseudoR2(model_area_residence)
# Theft model.
model_area_theft <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_theft)
summary(model_area_theft)
PseudoR2(model_area_theft)
# Violence model.
model_area_violence <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_violence)
summary(model_area_violence)
PseudoR2(model_area_vehicle)
# Extract estimates for vehicle crime.
Data_vehicle <- Data_vehicle %>%
mutate(estimates = model_area_vehicle$coefficients[1] +
Data_vehicle$Age       * model_area_vehicle$coefficients[2] +
Data_vehicle$Male      * model_area_vehicle$coefficients[3] +
Data_vehicle$White     * model_area_vehicle$coefficients[4] +
Data_vehicle$No_income * model_area_vehicle$coefficients[5] +
Data_vehicle$High_edu  * model_area_vehicle$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_vehicle), 1, exp_estimates))
# Check vehicle frequency distributions comparison.
table(csew_vf_vehicle$victarea)
table(Data_vehicle$victarea)
# Extract estimates for residence crime.
Data_residence <- Data_residence %>%
mutate(estimates = model_area_residence$coefficients[1] +
Data_residence$Age       * model_area_residence$coefficients[2] +
Data_residence$Male      * model_area_residence$coefficients[3] +
Data_residence$White     * model_area_residence$coefficients[4] +
Data_residence$No_income * model_area_residence$coefficients[5] +
Data_residence$High_edu  * model_area_residence$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_residence), 1, exp_estimates))
# Check residence frequency distrbibutions comparison.
table(csew_vf_residence$victarea)
table(Data_residence$victarea)
# Extract theft for residence crime.
Data_theft <- Data_theft %>%
mutate(estimates = model_area_theft$coefficients[1] +
Data_theft$Age       * model_area_theft$coefficients[2] +
Data_theft$Male      * model_area_theft$coefficients[3] +
Data_theft$White     * model_area_theft$coefficients[4] +
Data_theft$No_income * model_area_theft$coefficients[5] +
Data_theft$High_edu  * model_area_theft$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_theft), 1, exp_estimates))
# Check theft frequency distrbibutions comparison.
table(csew_vf_theft$victarea)
table(Data_theft$victarea)
# Extract violence for residence crime.
Data_violence <- Data_violence %>%
mutate(estimates = model_area_violence$coefficients[1] +
Data_violence$Age       * model_area_violence$coefficients[2] +
Data_violence$Male      * model_area_violence$coefficients[3] +
Data_violence$White     * model_area_violence$coefficients[4] +
Data_violence$No_income * model_area_violence$coefficients[5] +
Data_violence$High_edu  * model_area_violence$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_violence), 1, exp_estimates))
# Check violence frequency distrbibutions comparison.
table(csew_vf_violence$victarea)
table(Data_violence$victarea)
# Row bind each crime type data frame. Involves some factor -> character coercion for binding.
Data_crimes <- bind_rows(Data_vehicle, Data_residence, Data_theft, Data_violence)
# Select only crimes that happen in local area.
Data_crimes <- Data_crimes %>%
filter(victarea == 1)
# Load in census unit look-up table (OA, LSOA, MSOA, LAD).
OA_to_LAD <- read_csv(here("data","Output_Area_to_Lower_Layer_Super_Output_Area_to_Middle_Layer_Super_Output_Area_to_Local_Authority_District_December_2017_Lookup_in_Great_Britain__Classification_Version_2.csv"))
# Rename OA column and filter for Manchester.
OA_to_LAD <- OA_to_LAD %>%
rename(OA = OA11CD) %>%
filter(LAD17NM == "Manchester")
# Join to Data_crimes, remove unwaned columns, rename census units.
Data_crimes <- Data_crimes %>%
left_join(OA_to_LAD) %>%
rename(LSOA = LSOA11CD,
MSOA = MSOA11CD,
LAD  = LAD17CD) %>%
select(ID:violence, copsknow, LSOA, MSOA, LAD)
# Read in census look-up table(LSOA, Ward). Warnings not an issue.
LSOA_to_ward <- read_csv(here("data", "Lower_Layer_Super_Output_Area_2011_to_Ward_2018_Lookup_in_England_and_Wales_v3.csv"))
# Rename LSOA column and filter for Manchester.
LSOA_to_ward <- LSOA_to_ward %>%
rename(LSOA = LSOA11CD) %>%
filter(LAD18NM == "Manchester")
# Join to Data_crimes, remove unwaned columns, rename census units.
Data_crimes <- Data_crimes %>%
left_join(LSOA_to_ward) %>%
rename(WD = WD18CD) %>%
select(ID:LAD, WD)
# Save.
# write_csv(x = Data_crimes, path = here("data","Data_crimes.csv"))
# For each spatial scale, tally the number of total crimes which ocurred (based on CSEW estimates) and
# the number of crimes which were known to police.
# Split Data_crimes into a list for loop. Each one is renamed 'unit' so the loop function is simple later.
# We use this again later so it's written as a function now.
split_fun <- function(x){
list(x %>% rename(unit = OA)  ,
x %>% rename(unit = LSOA),
x %>% rename(unit = MSOA),
x %>% rename(unit = WD)  ,
x %>% rename(unit = LAD))
}
crimes_known_list <- split_fun(Data_crimes)
# Function for aggregating by unit.
crimes_known_fun <- function(x) {
x %>%
group_by(unit) %>%
summarise(known = sum(copsknow)) %>%
ungroup()
}
# Loop aggregtion through list, so we get counts known to police for each spatial scale.
crimes_known_agg_list <- lapply(crimes_known_list, crimes_known_fun)
# Function to tally number of crimes (estimated from CSEW) per unit.
crimes_fun <- function(x){
x %>%
group_by(unit)%>%
tally() %>%
ungroup() %>%
rename(all_crimes = n)
}
# Loop aggregation through list, so we get the crimes counts for each spatial scale.
crimes_list <- lapply(crimes_known_list, crimes_fun)
# Merge each together
crimes_known_full_list <- map2(crimes_list, crimes_known_agg_list, left_join)
# Name each element of list.
unit_names <- c("OA","LSOA","MSOA","WD","LAD")
names(crimes_known_full_list) <- unit_names
# Now we do the same but for each crime type.
crimes_Data_vehicle   <- Data_crimes %>% filter(vehicle == 1)
crimes_Data_residence <- Data_crimes %>% filter(residence == 1)
crimes_Data_theft     <- Data_crimes %>% filter(theft == 1)
crimes_Data_violence  <- Data_crimes %>% filter(violence == 1)
# Split function on each crime type df.
crimes_known_vehicle_list   <- split_fun(crimes_Data_vehicle)
crimes_known_residence_list <- split_fun(crimes_Data_residence)
crimes_known_theft_list     <- split_fun(crimes_Data_theft)
crimes_known_violence_list  <- split_fun(crimes_Data_violence)
# # Loop through lists, so we get counts known to police for each spatial scale, for each crime type.
crimes_known_vehicle_agg_list   <- lapply(crimes_known_vehicle_list  , crimes_known_fun)
crimes_known_residence_agg_list <- lapply(crimes_known_residence_list, crimes_known_fun)
crimes_known_theft_agg_list     <- lapply(crimes_known_theft_list    , crimes_known_fun)
crimes_known_violence_agg_list  <- lapply(crimes_known_violence_list , crimes_known_fun)
# Loop through lists, so we get the crimes counts for each spatial scale, for each crime type.
crimes_vehicle_list   <- lapply(crimes_known_vehicle_list, crimes_fun)
crimes_residence_list <- lapply(crimes_known_residence_list, crimes_fun)
crimes_theft_list     <- lapply(crimes_known_theft_list, crimes_fun)
crimes_violence_list  <- lapply(crimes_known_violence_list, crimes_fun)
# Merge each together
crimes_known_vehicle_full_list   <- map2(crimes_vehicle_list  , crimes_known_vehicle_agg_list  , left_join)
crimes_known_residence_full_list <- map2(crimes_residence_list, crimes_known_residence_agg_list, left_join)
crimes_known_theft_full_list     <- map2(crimes_theft_list    , crimes_known_theft_agg_list    , left_join)
crimes_known_violence_full_list  <- map2(crimes_violence_list , crimes_known_violence_agg_list , left_join)
# Name element of each list
names(crimes_known_vehicle_full_list)   <- unit_names
names(crimes_known_residence_full_list) <- unit_names
names(crimes_known_theft_full_list)     <- unit_names
names(crimes_known_violence_full_list)  <- unit_names
# Bind together so descriptives easily generated (omit crimes_LAD as only 1 observation).
crimes_units    <- bind_rows(crimes_known_full_list           , .id = "unit_type")
vehicle_units   <- bind_rows(crimes_known_vehicle_full_list   , .id = "unit_type")
residence_units <- bind_rows(crimes_known_residence_full_list , .id = "unit_type")
theft_units     <- bind_rows(crimes_known_theft_full_list     , .id = "unit_type")
violent_units   <- bind_rows(crimes_known_violence_full_list  , .id = "unit_type")
## Calculate RD% by crime type.
# Function for statistics, factor reordering.
rd_fun <- function(x) {
x %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD),
unit_type = fct_relevel(unit_type, "OA", "LSOA", "MSOA", "WD"))
}
# Compile into list and name
units_list <- list(crimes_units, vehicle_units, residence_units, theft_units, violent_units)
names(units_list) <- c("all_crimes", "vehicle", "residence", "theft", "violent")
#names(units_list) <- c("all_crimes", "vehicle_crime", "residence_crime", "theft_crime", "violent_crime")
# Loop funtion thru list
rd_stats_list <- lapply(units_list, rd_fun)
# Descriptives function
desc_fun <- function(x){
x %>%
group_by(unit_type) %>%
summarise(mean_RD    = mean(RD),
min_RD     = min(RD),
max_RD     = max(RD),
var_RD     = var(RD),
sd_RD      = sd(RD),
med_abs_RD = median(abs_RD))
}
# Print descriptives.
lapply(rd_stats_list, desc_fun)
# Visualise boxplot for each all crimes and by crime type. First remove LAD because no distribution to speak of.
rd_stats_list <- lapply(rd_stats_list, function(x){filter(x, unit_type != "LAD")})
# Plot function
plot_fun <- function(x){
ggplot(data = x) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
}
# Run function through list
boxplot_list <- lapply(rd_stats_list, plot_fun)
# Save visualisations individually.
lapply(names(boxplot_list),
function(x)ggsave(height = 6, width = 7, filename = paste("visuals/",x,".png",sep=""), plot=boxplot_list[[x]]))
# Single visual using cowplot.
full_plot <- plot_grid(plotlist = boxplot_list, nrow = 3, ncol = 2, labels = c("(a)","(b)","(c)","(d)","(e)","(f)"), scale = 0.9)
# Save full plot.
ggsave(plot = full_plot, filename = "visuals/full_boxplot.png", height = 14, width = 8)
# New grouped plot 14.05.20.
rd_stats_df <- bind_rows(rd_stats_list, .id = "crime_type")
full_plot_group <- ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black", size = 0.5,
position=position_dodge(width=1), width = 0.9) +
labs(y = "RD", x = "", fill = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
legend.key.size = unit(1.5, "cm"))
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 10, width = 12)
# ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped_outliers.png", height = 10, width = 12)
# Function to calculate ARB stats for each crime type.
ARB_fun <- function(x){
x %>%
mutate(RB  = ((all_crimes / known)-1),
ARB = abs(RB)) %>%
group_by(unit_type) %>%
summarise(mean_ARB    = mean(ARB),
min_ARB     = min(ARB),
max_ARB     = max(ARB),
var_ARB     = var(ARB),
sd_ARB      = sd(ARB))
}
# Print stats.
lapply(rd_stats_list, ARB_fun)
# Load crimes known to Greater Manchester Police in 2011/12.
GMP_all <- read_csv(here("data/GMP_all.csv"))
# Merge spatial information of wards.
GMP_manc <- GMP_all %>%
left_join(LSOA_to_ward, by = c("lsoa11cd" = "LSOA")) %>%
filter(ladnm == "Manchester")
# Check to remove crimes which did not occurr within a Manchester LSOA.
#GMP_manc <- subset(GMP_all, LSOA.code %in% LSOA_to_ward$LSOA)
# Recode crime types to match categories used thus far.
GMP_manc <- GMP_manc %>%
mutate(Crime.type = recode(Crime.type,
"Anti-social behaviour"       = "other",
"Burglary"                    = "residence",
"Criminal damage and arson"   = "residence",
"Drugs"                       = "other",
"Other crime"                 = "other",
"Other theft"                 = "theft",
"Public disorder and weapons" = "other",
"Robbery"                     = "theft",
"Shoplifting"                 = "other",
"Vehicle crime"               = "vehicle",
"Violent crime"               = "violent")) %>%
filter(Crime.type == "residence" | Crime.type == "theft" | Crime.type == "vehicle" | Crime.type == "violent")
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Append total crimes to the list.
GMP_all_list <- c((GMP_all_list), list(GMP_manc))
# Rename elements of the list (order checked manually).
names(GMP_all_list) <- c("residence", "theft", "vehicle", "violent", "all_crimes")
#names(GMP_all_list) <- c("other", "residence_crime", "theft_crime", "vehicle_crime", "violent_crime", "all_crimes")
# Create sf point objects for each df in the list.
GMP_all_list_sf <- lapply(GMP_all_list, function(x)st_as_sf(x, coords = c(x = "Longitude", y = "Latitude"), crs = 4326))
# Transform each sf object in the list to BNG.
GMP_all_list_sf <- lapply(GMP_all_list_sf, function(x)st_transform(x, 27700))
# Load in spatial polygons at OA, LSOA, MSOA and Ward level.
ward_sf <- st_read("data/shapefiles/ward_manc_sf.shp")
msoa_sf <- st_read("data/shapefiles/msoa_manc_sf.shp")
lsoa_sf <- st_read("data/shapefiles/lsoa_manc_sf.shp")
oa_sf   <- st_read("data/shapefiles/oa_manc_sf.shp")
# Compile into list and name elements.
sf_list <- list(ward_sf, msoa_sf, lsoa_sf, oa_sf)
names(sf_list) <- c("ward_sf","msoa_sf","lsoa_sf","oa_sf")
# Set CRS.
sf_list <- lapply(sf_list, function(x)st_transform(x, 27700))
# We now want to counts points in polygons for each combinations of crime type points (GMP_manc_sf).
# and spatial scale polygons (sf_list).
# For now, split sf_list back into different objects.
list2env(sf_list,envir=.GlobalEnv)
# Aggregating point to polygons: Ward
ward_agg_list <- lapply(GMP_all_list_sf, function(x)ward_sf %>% mutate(count = lengths(st_intersects(ward_sf, x))))
# Aggregating point to polygons: MSOA
msoa_agg_list <- lapply(GMP_all_list_sf, function(x)msoa_sf %>% mutate(count = lengths(st_intersects(msoa_sf, x))))
# Aggregating point to polygons: LSOA
lsoa_agg_list <- lapply(GMP_all_list_sf, function(x)lsoa_sf %>% mutate(count = lengths(st_intersects(lsoa_sf, x))))
# Aggregating point to polygons: OA
oa_agg_list <- lapply(GMP_all_list_sf, function(x)oa_sf %>% mutate(count = lengths(st_intersects(oa_sf, x))))
# Remove 'other' category so the merge works. We don't use it for analysis but it was needed to get the total crime figure.
#oa_agg_list   <- oa_agg_list  [-1]
#lsoa_agg_list <- lsoa_agg_list[-1]
#msoa_agg_list <- msoa_agg_list[-1]
#ward_agg_list <- ward_agg_list[-1]
# Join this real police recorded crime data with our CSEW estimates.
# Split existing unit_list into list of lists.
unit_list_crime_types <- lapply(units_list, function(x)group_split(x, unit_type))
# The first element of each list is LAD, which we don't need for the comaprison. Keeping it would complicate the join.
unit_list_crime_types <- lapply(unit_list_crime_types, function(x) x[-1])
# Collate each list into global environment by crime type. First check what objects will be called.
names(unit_list_crime_types)
list2env(unit_list_crime_types,envir=.GlobalEnv)
# Extract each spatial scale (i.e. each element of 'unit_list_crime_types').
lsoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[1]])
msoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[2]])
oa_gmp_df   <- lapply(unit_list_crime_types, function(x) x[[3]])
ward_gmp_df <- lapply(unit_list_crime_types, function(x) x[[4]])
# Order elements of each list to we can use map2 easily to for joins.
oa_gmp_df   <- oa_gmp_df  [order(names(oa_gmp_df  ))]
lsoa_gmp_df <- lsoa_gmp_df[order(names(lsoa_gmp_df))]
msoa_gmp_df <- msoa_gmp_df[order(names(msoa_gmp_df))]
ward_gmp_df <- ward_gmp_df[order(names(ward_gmp_df))]
oa_agg_list   <- oa_agg_list  [order(names(oa_agg_list  ))]
lsoa_agg_list <- lsoa_agg_list[order(names(lsoa_agg_list))]
msoa_agg_list <- msoa_agg_list[order(names(msoa_agg_list))]
ward_agg_list <- ward_agg_list[order(names(ward_agg_list))]
# Rename code name in Ward for join.
ward_agg_list <- lapply(ward_agg_list, function(x) x %>% rename(code = wd18cd))
# Join all.
join_fun <- function(x, y){
right_join(x, y, by = c("unit" = "code"))
}
# Run through join on each list.
oa_compare_list   <- map2(oa_gmp_df  , oa_agg_list  , join_fun)
lsoa_compare_list <- map2(lsoa_gmp_df, lsoa_agg_list, join_fun)
msoa_compare_list <- map2(msoa_gmp_df, msoa_agg_list, join_fun)
ward_compare_list <- map2(ward_gmp_df, ward_agg_list, join_fun)
# Bind together for each descriptive stats. Note warning about geometry: not a problem for now, it just removes the
# spatial attributes but retains the geometry column.
oa_compare_df   <- bind_rows(oa_compare_list  , .id = "crime_type")
lsoa_compare_df <- bind_rows(lsoa_compare_list, .id = "crime_type")
msoa_compare_df <- bind_rows(msoa_compare_list, .id = "crime_type")
ward_compare_df <- bind_rows(ward_compare_list, .id = "crime_type")
# Aggregate crime data without searching points in polygons.
# At the Output Area level.
oa_agg <- GMP_manc %>%
group_by(Crime.type, oa11) %>%
summarise(GMP_agg = n()) %>%
filter(Crime.type != "other") %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg_all <- GMP_manc %>%
group_by(oa11) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, oa11, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg <- bind_rows(oa_agg, oa_agg_all)
# At the LSOA level.
lsoa_agg <- GMP_manc %>%
group_by(Crime.type, lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg_all <- GMP_manc %>%
group_by(lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, lsoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg <- bind_rows(lsoa_agg, lsoa_agg_all)
# At the MSOA level.
msoa_agg <- GMP_manc %>%
group_by(Crime.type, msoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg_all <- GMP_manc %>%
group_by(msoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, msoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg <- bind_rows(msoa_agg, msoa_agg_all)
# At the Ward level.
wd_agg <- GMP_manc %>%
group_by(Crime.type, WD18CD) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg_all <- GMP_manc %>%
group_by(WD18CD) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, WD18CD, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg <- bind_rows(wd_agg, wd_agg_all)
# Bind togethe with main comparison dataset.
oa_compare_df <- oa_compare_df %>%
select(-unit_type) %>%
full_join(oa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
lsoa_compare_df <- lsoa_compare_df %>%
full_join(lsoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
msoa_compare_df <- msoa_compare_df %>%
full_join(msoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
ward_compare_df <- ward_compare_df %>%
full_join(wd_agg, by = c("crime_type", "unit"))
# Map comparisons 14.05.20.
# OA ===
# Create breaks, filter for all crimes and make spatial again.
all_crimes_brks <-  classIntervals(oa_compare_df$all_crimes, n = 5, style = "quantile")
known_brks      <-  classIntervals(oa_compare_df$known, n = 5, style = "quantile")
oa_compare_all_sf <- oa_compare_df %>%
filter(crime_type == "all_crimes") %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(all_crimes_cut = cut(all_crimes, all_crimes_brks$brks, include.lowest = T, dig.lab = 5),
known_cut      = cut(known     , known_brks$brks     , include.lowest = T, dig.lab = 5))
table(oa_compare_all_sf$all_crimes_cut)
# Map function.
oa_map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes_cut), colour = "transparent") +
theme_minimal() +
scale_fill_viridis_d(alpha = 0.9) +
labs(fill = "") +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = known_cut), colour = "transparent") +
theme_minimal() +
scale_fill_viridis_d(alpha = 0.9) +
labs(fill = "") +
theme(legend.position = "bottom")
# temp <- ggplot(data = x) +
#   geom_sf(aes(fill = known_cut)) +
#   scale_fill_viridis_d(alpha = 0.9) +
#   labs(fill = "") +
#   theme(legend.position = "bottom") #+
# guides(fill = guide_colorbar(barwidth=20, barheight = 1)) + labs(fill = NULL)
# leg <- get_legend(temp)
# plot_maps <-   plot_grid(p1, p2, labels = c("Simulated all crime","Simulated crime known to police"),
#                          scale = 0.9, label_fontface = "plain")
# plot_grid(plot_maps, leg, nrow = 2, rel_heights = c(10,1))
plot_grid(p1, p2, nrow = 1, labels = c("Simulated all crime","Simulated crime known to police"))
}
# Plot and save OA.
temp <- oa_map_fun(oa_compare_all_sf)
ggsave(plot = temp, filename = "visuals/map_comaprison_oa.png", height = 24, width = 24, unit = "cm")
# MSOA ===
# Create breaks, filter for all crimes and make spatial again.
all_crimes_brks <-  classIntervals(msoa_compare_df$all_crimes, n = 5, style = "quantile")
known_brks      <-  classIntervals(msoa_compare_df$known, n = 5, style = "quantile")
msoa_compare_all_sf <- msoa_compare_df %>%
filter(crime_type == "all_crimes") %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(all_crimes_cut = cut(all_crimes, all_crimes_brks$brks, include.lowest = T, dig.lab = 5),
known_cut      = cut(known     , known_brks$brks     , include.lowest = T, dig.lab = 5))
# Map function.
msoa_map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes_cut), colour = "transparent") +
theme_minimal() +
scale_fill_viridis_d(alpha = 0.9) +
labs(fill = "") +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = known_cut), colour = "transparent") +
theme_minimal() +
scale_fill_viridis_d(alpha = 0.9) +
labs(fill = "") +
theme(legend.position = "bottom")
plot_grid(p1, p2, nrow = 1, labels = c("Simulated all crime","Simulated crime known to police"))
}
# Plot and save MSOA.
temp <- msoa_map_fun(msoa_compare_all_sf)
ggsave(plot = temp, filename = "visuals/map_comaprison_msoa.png", height = 24, width = 24, unit = "cm")
msoa_compare_all_sf <- msoa_compare_df %>%
filter(crime_type == "all_crimes") %>%
st_as_sf(sf_column_name = "geometry") %>%
mutate(all_crimes_cut = cut(all_crimes, all_crimes_brks$brks, include.lowest = T, dig.lab = 10),
known_cut      = cut(known     , known_brks$brks     , include.lowest = T, dig.lab = 10))
# Map function.
msoa_map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes_cut), colour = "transparent") +
theme_minimal() +
scale_fill_viridis_d(alpha = 0.9) +
labs(fill = "") +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = known_cut), colour = "transparent") +
theme_minimal() +
scale_fill_viridis_d(alpha = 0.9) +
labs(fill = "") +
theme(legend.position = "bottom")
plot_grid(p1, p2, nrow = 1, labels = c("Simulated all crime","Simulated crime known to police"))
}
# Plot and save MSOA.
temp <- msoa_map_fun(msoa_compare_all_sf)
ggsave(plot = temp, filename = "visuals/map_comaprison_msoa.png", height = 24, width = 24, unit = "cm")
