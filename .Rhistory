mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 >= 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank >= 7)])
# Mean of crime reporting for residence crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 <= 3)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 > 3 & csew_vf_residence$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_residence$copsknow[which(csew_vf_residence$emdidec3 >= 7)],
w = csew_vf_residence$IndivWgt.x[which(csew_vf_residence$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$residence == 1 &
Data_crimes$IMD_rank >= 7)])
# Create three age groups for property crime data.
csew_vf_theft$age_rec <- NA
csew_vf_theft$age_rec[csew_vf_theft$age < 36] <- "less35"
csew_vf_theft$age_rec[csew_vf_theft$age >= 36 & csew_vf_theft$age < 56] <- "36to55"
csew_vf_theft$age_rec[csew_vf_theft$age >= 56] <- "56more"
# Mean of crime reporting for property crimes by marriage status.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$marsta == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$marsta == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for property crimes by country of birth.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$cry2 == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$BornUK == 1)])
# Mean of crime reporting for property crimes by country of birth.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$cry2 == 1)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$BornUK == 1)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$cry2 == 0)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$cry2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$BornUK == 0)])
# Mean of crime reporting for property crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$emdidec3 <= 3)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$emdidec3 > 3 & csew_vf_theft$emdidec3 < 7)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$emdidec3 > 3 & csew_vf_theft$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_theft$copsknow[which(csew_vf_theft$emdidec3 >= 7)],
w = csew_vf_theft$IndivWgt.x[which(csew_vf_theft$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$theft == 1 &
Data_crimes$IMD_rank >= 7)])
#Create three age groups for violent crimes data.
csew_vf_violence$age_rec <- NA
csew_vf_violence$age_rec[csew_vf_violence$age < 36] <- "less35"
csew_vf_violence$age_rec[csew_vf_violence$age >= 36 & csew_vf_violence$age < 56] <- "36to55"
csew_vf_violence$age_rec[csew_vf_violence$age >= 56] <- "56more"
# Mean of crime reporting for violence crimes by marriage status.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$marsta == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$marsta == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$Married == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$marsta == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$marsta == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$Married == 0)])
# Mean of crime reporting for violence crimes by country of birth.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$cry2 == 1)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$cry2 == 1)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$BornUK == 1)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$cry2 == 0)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$cry2 == 0)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$BornUK == 0)])
# Mean of crime reporting for violence crimes by IMD deciles.
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$emdidec3 <= 3)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$emdidec3 <= 3)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$IMD_rank <= 3)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$emdidec3 > 3 & csew_vf_violence$emdidec3 < 7)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$emdidec3 > 3 & csew_vf_violence$emdidec3 < 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$IMD_rank > 3 & Data_crimes$IMD_rank > 7)])
stats::weighted.mean(x = csew_vf_violence$copsknow[which(csew_vf_violence$emdidec3 >= 7)],
w = csew_vf_violence$IndivWgt.x[which(csew_vf_violence$emdidec3 >= 7)],
na.rm = T)
mean(x = Data_crimes$copsknow[which(Data_crimes$violence == 1 &
Data_crimes$IMD_rank >= 7)])
########################################################
#                                                      #
# Simulation study levels of geography and crime data  #
#                                                      #
# Angelo Moretti and David Buil-Gil                    #
#                                                      #
# Edits: Sam Langton                                   #
#                                                      #
########################################################
# To see everything in Console.
options(max.print=999999)
# Clear Global Environment.
rm(list = ls())
# Load packages required.
packages <- c("cowplot", "purrr"    , "devtools", "maptools",
"spdep"  , "DescTools", "MASS"    , "haven"   ,
"here"   , "readr"    , "dplyr"   , "tidyr"   ,
"forcats", "ggplot2"  , "sf"      , "classInt",
"rsq"    , "scales")
lapply(packages, require, character.only = TRUE)
# Load data on age.
Age_by_OA_Manchester <- read_csv(here("data","Age_by_OA_Manchester_replicate.csv"))
# Calculate number of residents in Manchester.
N <- sum(Age_by_OA_Manchester$Pop)
N
# Calculate number of Output Areas (OA).
D <- nrow(Age_by_OA_Manchester)
D
# Create a tibble with one row for each synthetic resident in Manchester.
# This will be filled with information later.
syn_res <- tibble(ID = 1:N)
# Assign each resident to an OA based on the size of the resident populations.
syn_res <- syn_res %>%
mutate(OA = rep.int(x = Age_by_OA_Manchester$OA, times = Age_by_OA_Manchester$Pop))
# Join the OA-level age data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res, Age_by_OA_Manchester, by = "OA")
# Create age for each resident based on this distribution.
# Seed is set for replication.
set.seed(500)
syn_res_OA <- syn_res_OA %>%
mutate(Age = rnorm(n = N, mean = syn_res_OA$mean_age_OA, sd = syn_res_OA$sd_age_OA)) %>%
select(ID, OA, Age)
# Load data on sex.
Sex_by_OA_Manchester <- read_csv(here("data","Sex_by_OA_Manchester_replicate.csv"))
# Join the OA-level sex data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Sex_by_OA_Manchester, by = "OA")
# Create sex for each resident based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(Male = rbinom(n = N, size = 1, prob = Mean_male)) %>%
select(ID, OA, Age, Male)
# Load data on ethnicity.
Ethnicity_by_OA_Manchester <- read_csv(here("data","Ethnicity_by_OA_Manchester_replicate.csv"))
# Join the OA-level sex data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Ethnicity_by_OA_Manchester, by = "OA")
# Create ethnicity for resident (white or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(White = rbinom(n = N, size = 1, prob = Mean_white)) %>%
select(ID, OA, Age, Male, White)
# Load data on income.
Income_by_OA_Manchester <- read_csv(here("data","Income_by_OA_Manchester_replicate.csv"))
# Join the OA-level income data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Income_by_OA_Manchester, by = "OA")
# Create income for resident (income or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(No_income = rbinom(n = N, size = 1, prob = mean_no_income)) %>%
select(ID, OA, Age, Male, White, No_income)
# Load data on education.
Edu_by_OA_Manchester <- read_csv(here("data","Edu_by_OA_Manchester_replicate.csv"))
# Join the OA-level education data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Edu_by_OA_Manchester, by = "OA")
# Create education for resident (Level 4 or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(High_edu = rbinom(n = N, size = 1, prob = Mean_level4_edu)) %>%
select(ID, OA, Age, Male, White, No_income, High_edu)
# Load data on marriage status.
Marriage_by_OA_Manchester <- read_csv(here("data","Marriage_by_OA_Manchester_replicate.csv"))
# Join the OA-level marriage data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, Marriage_by_OA_Manchester, by = "OA")
# Create education for resident (Level 4 or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(Married = rbinom(n = N, size = 1, prob = Mean_married)) %>%
select(ID, OA, Age, Male, White, No_income, High_edu, Married)
# Load data on country of birth.
BornUK_by_OA_Manchester <- read_csv(here("data","BornUK_by_OA_Manchester_replicate.csv"))
# Join the OA-level country of birth data with the synthetic individual-level data.
syn_res_OA <- left_join(syn_res_OA, BornUK_by_OA_Manchester, by = "OA")
# Create education for resident (Level 4 or not) based on this distribution.
syn_res_OA <- syn_res_OA %>%
mutate(BornUK = rbinom(n = N, size = 1, prob = Mean_bornUK)) %>%
select(ID, OA, Age, Male, White, No_income, High_edu, Married, BornUK)
# Load IMD data.
IMD <- read_csv(here("data", "imd2010englsoa2011.csv"))
# Select columns in IMD data, reorder by IMD rank and calculate decile.
IMD <- IMD %>%
select(LSOA11CD, `National decile2`, imd_rank) %>%
rename(decile = 2) %>%
arrange(imd_rank)
# Load in census unit look-up table (OA, LSOA, MSOA, LAD).
OA_to_LAD <- read_csv(here("data","Output_Area_to_Lower_Layer_Super_Output_Area_to_Middle_Layer_Super_Output_Area_to_Local_Authority_District_December_2017_Lookup_in_Great_Britain__Classification_Version_2.csv"))
# Select columns in look-up table.
OA_to_LAD <- OA_to_LAD %>%
select(OA11CD, LSOA11CD)
# Merge IMD data to OAs.
OA_to_LAD <- left_join(OA_to_LAD, IMD, by = "LSOA11CD")
# Add IMD data to synthetic data.
syn_res_OA <- syn_res_OA %>%
left_join(OA_to_LAD, by = c("OA" = "OA11CD")) %>%
select(-LSOA11CD, -imd_rank) %>%
rename(IMD_rank = 10)
# Load in CSEW nvf data
load(here("data","csew_apr11mar12_nvf.Rdata"))
# Missings age for those over 120 years old.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(age = ifelse(test = age > 120, yes = NA, no = age))
# Recode sex female from 2 to 0
csew <- csew %>%
mutate(sex = if_else(condition = sex == 2, true = 0, false = sex))
# Recode ethnicity in CSEW
csew <- csew %>%
mutate(reseth = if_else(condition = reseth != 1, true = 0, false = reseth))
# Missings for some work2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(work2 = ifelse(test = work2 > 3, yes = NA, no = work2),
work2 = if_else(condition = work2 == 2, true = 0, false = work2))
# Recode employment.
csew <- csew %>%
mutate(remploy = if_else(condition = remploy == 2 | remploy == 3, true = 1, false = 0))
# Missings for some educat2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(educat2 = ifelse(test = educat2 > 10, yes = NA, no = educat2),
educat2 = if_else(condition = educat2 == 1 | educat2 == 2 | educat2 == 3, true = 1, false = 0))
# Missings for some marsta categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(marsta = ifelse(test = marsta > 7, yes = NA, no = marsta),
marsta = if_else(condition = marsta == 2 | marsta == 3, true = 1, false = 0))
# Missings for some cry2 categories, and recode.
# `ifelse()` used for missings as it handles NA (unlike if_else).
csew <- csew %>%
mutate(cry2 = ifelse(test = cry2 > 7, yes = NA, no = cry2),
cry2 = if_else(condition = cry2 == 1 | cry2 == 2 | cry2 == 3 | cry2 == 4 | cry2 == 5, true = 1, false = 0))
# Data handling to crime categories: replace missings with zeros and then sum to create new categories.
csew <- csew %>%
replace_na(replace = list(nmotthef = 0, nmotstol = 0, ncardam  = 0, nbikthef = 0,
nprevthe = 0, nprevdam = 0, nprevtry = 0, nprevsto = 0,
nproside = 0, nprdefac = 0, nhomthef = 0, nyrhthef = 0,
nyrhodam = 0, nyrhotry = 0, nyrhosto = 0, nyroside = 0,
nyrdefac = 0, npersth  = 0, ntrypers = 0, noththef = 0,
ndelibda = 0, ndelibv  = 0, nthrevio = 0, nsexatt  = 0,
nhhldvio = 0)) %>%
mutate(vehicle    = nmotthef + nmotstol + ncardam,
residence  = nprevthe + nprevdam + nprevtry + nprevsto + nproside + nprdefac +
nhomthef + nyrhthef + nyrhodam + nyrhotry + nyrhosto + nyroside + nyrdefac,
theft      = npersth  + ntrypers + noththef + nbikthef,
theft_dam  = theft    + ndelibda,
violence   = ndelibv  + nthrevio  + nsexatt + nhhldvio,
all_crimes = vehicle  + residence + theft + ndelibda + violence)
# Run negative binomial models to generate estimates from CSEW.
model_vehicle <- glm.nb(vehicle ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csew)
summary(model_vehicle)
#PseudoR2(model_vehicle)
rsq.n(model_vehicle)
RMSE(model_vehicle)/(max(csew$vehicle)-min(csew$vehicle))
model_residence <- glm.nb(residence ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csew)
summary(model_residence)
#PseudoR2(model_residence)
rsq.n(model_residence)
RMSE(model_residence)/(max(csew$residence)-min(csew$residence))
model_theft <- glm.nb(theft ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csew)
summary(model_theft)
#PseudoR2(model_theft)
rsq.n(model_theft)
RMSE(model_theft)/(max(csew$theft)-min(csew$theft))
model_violence <- glm.nb(violence ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csew)
summary(model_violence)
#PseudoR2(model_violence)
rsq.n(model_violence)
RMSE(model_violence)/(max(csew$violence)-min(csew$violence))
model_all_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csew)
summary(model_all_crimes)
rsq.n(model_all_crimes)
RMSE(model_all_crimes)/(max(csew$all_crimes)-min(csew$all_crimes))
# Estimate model for Metropolitan Areas only (excluding London).
csewMet <- csew %>% filter(ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
rsq.n(model_met_crimes)
RMSE(model_met_crimes)/(max(csewMet$all_crimes)-min(csewMet$all_crimes))
# Estimate model for Metropolitan Areas only (excluding London).
csewMet <- csew %>% filter(ladtype == 2 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2
csewMet <- csew %>% filter(gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
summary(model_all_crimes)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2
csewMet <- csew %>% filter(inner == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2
csewMet <- csew %>% filter(inner == 1 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2
csewMet <- csew %>% filter(inner == 1 & ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1
csewMet <- csew %>% filter(inner == 1 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1
csewMet <- csew %>% filter(gor == 2 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1
csewMet <- csew %>% filter(ladtype == 2 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1
csewMet <- csew %>% filter(ladtype == 2 & rural2 == 1 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1
csewMet <- csew %>% filter(ladtype == 2 & rural2 == 1 & inner == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2
csewMet <- csew %>% filter(indlon == 2 & inner == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2
csewMet <- csew %>% filter(indlon == 2 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(indlon == 2 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(indlon == 2 & ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1 & ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1 & inner == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1 & indlon == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1 & ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & indlon == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & rural2 == 1 & indlon == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & indlon == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(rural2 == 1 & gor == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(rural2 == 1 & gor == 2 & ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(indlon == 2 & ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(indlon == 2 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(indlon == 2 & rural2 == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
# Estimate model for cities only (excluding London).
csewMet <- csew %>% filter(ladsupgp == 1)
# Estimate model for cities only (excluding London).
csewUrb <- csew %>% filter(ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewUrb)
# Estimate model for Metropolitan Areas only (excluding London).ladtype == 2 gor == 2 rural2 == 1 inner == 1 indlon == 2 ladsupgp == 1
# good results indlon == 2 & rural2 == 1
csewMet <- csew %>% filter(ladtype == 2)
# Estimate model for cities only (excluding London).
csewUrb <- csew %>% filter(ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewUrb)
# Estimate model for cities only (excluding London).
csewUrb <- csew %>% filter(ladsupgp == 1)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewUrb)
summary(model_met_crimes)
# Estimate model for cities only (excluding London).
csewUrb <- csew %>% filter(ladsupgp == 1)
model_urb_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewUrb)
summary(model_urb_crimes)
# Estimate model for cities only (excluding London).
csewUrb <- csew %>% filter(ladsupgp == 1)
model_urb_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewUrb)
summary(model_urb_crimes)
rsq.n(model_urb_crimes)
RMSE(model_urb_crimes)/(max(csewUrb$all_crimes)-min(csewUrb$all_crimes))
# Estimate model for Metropolitan Areas only (excluding London).
csewMet <- csew %>% filter(ladtype == 2)
model_met_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2 + marsta + cry2 + emdidec3, data = csewMet)
summary(model_met_crimes)
