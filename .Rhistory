View(rd_stats_list[[1]])
# New plot 14.05.20.
rd_stats_df <- bind_rows(rd_stats_list)
View(rd_stats_df)
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, fill = unit_type, group = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
# scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, group = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
# scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
names(rd_stats_list)
# New plot 14.05.20.
rd_stats_df <- bind_rows(rd_stats_list, .id = TRUE)
# New plot 14.05.20.
rd_stats_df <- bind_rows(rd_stats_list, .id = "crime_type")
View(rd_stats_df)
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, fill = unit_type, group = crime_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
# scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, group = crime_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
# scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, group = crime_type), colour = "black", position = "dodge") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
# scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
# scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "bottom",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "", fill = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
full_plot_group <- ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "", fill = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 10, width = 14)
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 10, width = 12)
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 8, width = 12)
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 12, width = 14)
full_plot_group <- ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black", size = 0.5) +
labs(y = "RD", x = "", fill = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 12, width = 14)
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 10, width = 12)
full_plot_group <- ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black", size = 0.5) +
labs(y = "RD", x = "", fill = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 14),
axis.text = element_text(size = 14))
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 10, width = 12)
# Function to calculate ARB stats for each crime type.
ARB_fun <- function(x){
x %>%
mutate(RB  = ((all_crimes / known)-1),
ARB = abs(RB)) %>%
group_by(unit_type) %>%
summarise(mean_ARB    = mean(ARB),
min_ARB     = min(ARB),
max_ARB     = max(ARB),
var_ARB     = var(ARB),
sd_ARB      = sd(ARB))
}
# Print stats.
lapply(rd_stats_list, ARB_fun)
# Load crimes known to Greater Manchester Police in 2011/12.
GMP_all <- read_csv(here("data/GMP_all.csv"))
# Merge spatial information of wards.
GMP_manc <- GMP_all %>%
left_join(LSOA_to_ward, by = c("lsoa11cd" = "LSOA")) %>%
filter(ladnm == "Manchester")
# Check to remove crimes which did not occurr within a Manchester LSOA.
#GMP_manc <- subset(GMP_all, LSOA.code %in% LSOA_to_ward$LSOA)
# Recode crime types to match categories used thus far.
GMP_manc <- GMP_manc %>%
mutate(Crime.type = recode(Crime.type,
"Anti-social behaviour"       = "other",
"Burglary"                    = "residence",
"Criminal damage and arson"   = "residence",
"Drugs"                       = "other",
"Other crime"                 = "other",
"Other theft"                 = "theft",
"Public disorder and weapons" = "other",
"Robbery"                     = "theft",
"Shoplifting"                 = "other",
"Vehicle crime"               = "vehicle",
"Violent crime"               = "violent")) %>%
filter(Crime.type == "residence" | Crime.type == "theft" | Crime.type == "vehicle" | Crime.type == "violent")
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Append total crimes to the list.
GMP_all_list <- c((GMP_all_list), list(GMP_manc))
# Rename elements of the list (order checked manually).
names(GMP_all_list) <- c("residence", "theft", "vehicle", "violent", "all_crimes")
#names(GMP_all_list) <- c("other", "residence_crime", "theft_crime", "vehicle_crime", "violent_crime", "all_crimes")
# Create sf point objects for each df in the list.
GMP_all_list_sf <- lapply(GMP_all_list, function(x)st_as_sf(x, coords = c(x = "Longitude", y = "Latitude"), crs = 4326))
# Transform each sf object in the list to BNG.
GMP_all_list_sf <- lapply(GMP_all_list_sf, function(x)st_transform(x, 27700))
# Load in spatial polygons at OA, LSOA, MSOA and Ward level.
ward_sf <- st_read("data/shapefiles/ward_manc_sf.shp")
msoa_sf <- st_read("data/shapefiles/msoa_manc_sf.shp")
lsoa_sf <- st_read("data/shapefiles/lsoa_manc_sf.shp")
oa_sf   <- st_read("data/shapefiles/oa_manc_sf.shp")
# Compile into list and name elements.
sf_list <- list(ward_sf, msoa_sf, lsoa_sf, oa_sf)
names(sf_list) <- c("ward_sf","msoa_sf","lsoa_sf","oa_sf")
# Set CRS.
sf_list <- lapply(sf_list, function(x)st_transform(x, 27700))
# We now want to counts points in polygons for each combinations of crime type points (GMP_manc_sf).
# and spatial scale polygons (sf_list).
# For now, split sf_list back into different objects.
list2env(sf_list,envir=.GlobalEnv)
# Aggregating point to polygons: Ward
ward_agg_list <- lapply(GMP_all_list_sf, function(x)ward_sf %>% mutate(count = lengths(st_intersects(ward_sf, x))))
# Aggregating point to polygons: MSOA
msoa_agg_list <- lapply(GMP_all_list_sf, function(x)msoa_sf %>% mutate(count = lengths(st_intersects(msoa_sf, x))))
# Aggregating point to polygons: LSOA
lsoa_agg_list <- lapply(GMP_all_list_sf, function(x)lsoa_sf %>% mutate(count = lengths(st_intersects(lsoa_sf, x))))
# Aggregating point to polygons: OA
oa_agg_list <- lapply(GMP_all_list_sf, function(x)oa_sf %>% mutate(count = lengths(st_intersects(oa_sf, x))))
# Remove 'other' category so the merge works. We don't use it for analysis but it was needed to get the total crime figure.
#oa_agg_list   <- oa_agg_list  [-1]
#lsoa_agg_list <- lsoa_agg_list[-1]
#msoa_agg_list <- msoa_agg_list[-1]
#ward_agg_list <- ward_agg_list[-1]
# Join this real police recorded crime data with our CSEW estimates.
# Split existing unit_list into list of lists.
unit_list_crime_types <- lapply(units_list, function(x)group_split(x, unit_type))
# The first element of each list is LAD, which we don't need for the comaprison. Keeping it would complicate the join.
unit_list_crime_types <- lapply(unit_list_crime_types, function(x) x[-1])
# Collate each list into global environment by crime type. First check what objects will be called.
names(unit_list_crime_types)
list2env(unit_list_crime_types,envir=.GlobalEnv)
# Extract each spatial scale (i.e. each element of 'unit_list_crime_types').
lsoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[1]])
msoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[2]])
oa_gmp_df   <- lapply(unit_list_crime_types, function(x) x[[3]])
ward_gmp_df <- lapply(unit_list_crime_types, function(x) x[[4]])
# Order elements of each list to we can use map2 easily to for joins.
oa_gmp_df   <- oa_gmp_df  [order(names(oa_gmp_df  ))]
lsoa_gmp_df <- lsoa_gmp_df[order(names(lsoa_gmp_df))]
msoa_gmp_df <- msoa_gmp_df[order(names(msoa_gmp_df))]
ward_gmp_df <- ward_gmp_df[order(names(ward_gmp_df))]
oa_agg_list   <- oa_agg_list  [order(names(oa_agg_list  ))]
lsoa_agg_list <- lsoa_agg_list[order(names(lsoa_agg_list))]
msoa_agg_list <- msoa_agg_list[order(names(msoa_agg_list))]
ward_agg_list <- ward_agg_list[order(names(ward_agg_list))]
# Rename code name in Ward for join.
ward_agg_list <- lapply(ward_agg_list, function(x) x %>% rename(code = wd18cd))
# Join all.
join_fun <- function(x, y){
right_join(x, y, by = c("unit" = "code"))
}
# Run through join on each list.
oa_compare_list   <- map2(oa_gmp_df  , oa_agg_list  , join_fun)
lsoa_compare_list <- map2(lsoa_gmp_df, lsoa_agg_list, join_fun)
msoa_compare_list <- map2(msoa_gmp_df, msoa_agg_list, join_fun)
ward_compare_list <- map2(ward_gmp_df, ward_agg_list, join_fun)
# Map comparison plot 14.05.20.
View(oa_compare_list[[1]])
# Map comparison plot 14.05.20.
class(oa_compare_list[[1]])
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = counts), colour = "transparent") +
scale_colour_viridis_c()
}
map_fun(oa_compare_list[[1]])
ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_colour_viridis_c()
# Map comparison plot 14.05.20.
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_colour_viridis_c()
}
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_colour_viridis_c()
}
map_fun(oa_compare_list[[1]])
# spatial attributes but retains the geometry column.
oa_compare_df   <- bind_rows(oa_compare_list  , .id = "crime_type")
lsoa_compare_df <- bind_rows(lsoa_compare_list, .id = "crime_type")
msoa_compare_df <- bind_rows(msoa_compare_list, .id = "crime_type")
ward_compare_df <- bind_rows(ward_compare_list, .id = "crime_type")
# Aggregate crime data without searching points in polygons.
# At the Output Area level.
oa_agg <- GMP_manc %>%
group_by(Crime.type, oa11) %>%
summarise(GMP_agg = n()) %>%
filter(Crime.type != "other") %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg_all <- GMP_manc %>%
group_by(oa11) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, oa11, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = oa11)
oa_agg <- bind_rows(oa_agg, oa_agg_all)
# At the LSOA level.
lsoa_agg <- GMP_manc %>%
group_by(Crime.type, lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg_all <- GMP_manc %>%
group_by(lsoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, lsoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = lsoa11cd)
lsoa_agg <- bind_rows(lsoa_agg, lsoa_agg_all)
# At the MSOA level.
msoa_agg <- GMP_manc %>%
group_by(Crime.type, msoa11cd) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg_all <- GMP_manc %>%
group_by(msoa11cd) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, msoa11cd, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = msoa11cd)
msoa_agg <- bind_rows(msoa_agg, msoa_agg_all)
# At the Ward level.
wd_agg <- GMP_manc %>%
group_by(Crime.type, WD18CD) %>%
summarise(GMP_agg = n()) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg_all <- GMP_manc %>%
group_by(WD18CD) %>%
summarise(GMP_agg = n()) %>%
mutate(Crime.type = "all_crimes") %>%
select(Crime.type, WD18CD, GMP_agg) %>%
rename(crime_type = Crime.type,
unit       = WD18CD)
wd_agg <- bind_rows(wd_agg, wd_agg_all)
View(oa_agg)
# Bind togethe with main comparison dataset.
oa_compare_df <- oa_compare_df %>%
select(-unit_type) %>%
full_join(oa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
lsoa_compare_df <- lsoa_compare_df %>%
full_join(lsoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
msoa_compare_df <- msoa_compare_df %>%
full_join(msoa_agg, by = c("crime_type", "unit")) %>%
replace(is.na(.), 0)
ward_compare_df <- ward_compare_df %>%
full_join(wd_agg, by = c("crime_type", "unit"))
View(oa_compare_df)
# Map comparisons.
oa_compare_sf <- left_join(oa_sf, oa_compare_df)
class
class(oa_compare_df)
oa_compare_df
class(oa_sf)
oa_sf
# Map comparisons.
oa_compare_sf <- left_join(oa_sf, oa_compare_df, by = c("unit" = "code"))
# Map comparisons.
oa_compare_sf <- left_join(oa_sf, oa_compare_df, by = c("code" = "unit"))
Vie(oa_compare_sf)
View(oa_compare_sf)
map_fun <- ggplot(data = oa_compare_sf) +
geom_sf(mapping = aes(fill = count)) +
scale_fill_viridis_c()
map_fun <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count)) +
scale_fill_viridis_c()
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = count)) +
scale_fill_viridis_c()
}
# Test.
map_fun(oa_compare_sf)
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c()
}
# Test.
map_fun(oa_compare_sf)
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c()
}
# Test.
map_fun(oa_compare_sf)
dim(oa_compare_df)
# Map comparisons 14.05.20.
# Join spatial data back in.
oa_compare_all_df <- filter(oa_compare_df, crime_type == "all_crimes")
oa_compare_sf <- left_join(oa_sf, oa_compare_all_df, by = c("code" = "unit"))
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c()
}
# Test.
map_fun(oa_compare_sf)
map_fun <- function(x){
ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c()
}
# Test.
map_fun(oa_compare_sf)
map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c()
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c()
plot_grid(p1, p2)
}
# Test.
map_fun(oa_compare_sf)
# Map function.
map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position = "bottom")
plot_grid(p1, p2)
}
# Test.
map_fun(oa_compare_sf, labels = c("Police recorded crime", "Simulated crime"))
map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position = "bottom")
plot_grid(p1, p2, labels = c("Police recorded crime", "Simulated crime"))
}
# Test.
map_fun(oa_compare_sf)
map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
labs(fill = "") +
theme(legend.position = "bottom")
plot_grid(p1, p2, labels = c("Police recorded crime", "Simulated crime"))
}
# Test.
map_fun(oa_compare_sf)
# Map function.
map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
labs(fill = "") +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
labs(fill = "") +
theme(legend.position = "bottom")
plot_grid(p1, p2, labels = c("Police recorded crime", "Simulated crime"))
}
# Test.
map_fun(oa_compare_sf)
map_fun <- function(x){
p1 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = count), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
labs(fill = "") +
theme(legend.position = "bottom")
p2 <- ggplot(data = x) +
geom_sf(mapping = aes(fill = all_crimes), colour = "transparent") +
scale_fill_viridis_c() +
theme_minimal() +
labs(fill = "") +
theme(legend.position = "bottom")
plot_grid(p1, p2, labels = c("Police recorded crime", "Simulated crime"), scale = 0.9)
}
# Test.
map_fun(oa_compare_sf)
