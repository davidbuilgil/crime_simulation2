PseudoR2(model_theft)
model_violence <- glm.nb(violence ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_violence)
PseudoR2(model_violence)
model_all_crimes <- glm.nb(all_crimes ~ age + sex + reseth + remploy + educat2, data = csew)
summary(model_all_crimes)
# Combine estimates for each crime type, assigning to a vector.
# Vehicle crime
eta_vehicle <- model_vehicle$coefficients[1] +
syn_res_OA$Age * model_vehicle$coefficients[2] +
syn_res_OA$Male * model_vehicle$coefficients[3] +
syn_res_OA$White * model_vehicle$coefficients[4] +
syn_res_OA$No_income * model_vehicle$coefficients[5] +
syn_res_OA$High_edu * model_vehicle$coefficients[6]
# Residence crime
eta_residence <- model_residence$coefficients[1] +
syn_res_OA$Age * model_residence$coefficients[2] +
syn_res_OA$Male * model_residence$coefficients[3] +
syn_res_OA$White * model_residence$coefficients[4] +
syn_res_OA$No_income * model_residence$coefficients[5] +
syn_res_OA$High_edu * model_residence$coefficients[6]
# Theft crime
eta_theft <- model_theft$coefficients[1] +
syn_res_OA$Age * model_theft$coefficients[2] +
syn_res_OA$Male * model_theft$coefficients[3] +
syn_res_OA$White * model_theft$coefficients[4] +
syn_res_OA$No_income * model_theft$coefficients[5] +
syn_res_OA$High_edu * model_theft$coefficients[6]
# Violent crime
eta_violence <- model_violence$coefficients[1] +
syn_res_OA$Age * model_violence$coefficients[2] +
syn_res_OA$Male * model_violence$coefficients[3] +
syn_res_OA$White * model_violence$coefficients[4] +
syn_res_OA$No_income * model_violence$coefficients[5] +
syn_res_OA$High_edu * model_violence$coefficients[6]
# Create distributions based on these estimates for the synthetic individual data.
syn_res_OA <-  syn_res_OA %>%
mutate(vehicle   = rnbinom(length(eta_vehicle)  , mu = exp(eta_vehicle)  , size = model_vehicle$theta),
residence = rnbinom(length(eta_residence), mu = exp(eta_residence), size = model_residence$theta),
theft     = rnbinom(length(eta_theft)    , mu = exp(eta_theft)    , size = model_theft$theta),
violence  = rnbinom(length(eta_violence) , mu = exp(eta_violence) , size = model_violence$theta))
# Load CSEW vf data
load(here("data","csew_apr11mar12_vf.Rdata"))
# Subset only those synthetic individuals who were victimised for vehicle crime.
syn_res_OA_veh <- syn_res_OA %>%
filter(vehicle != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_veh <- as.data.frame(lapply(syn_res_OA_veh, rep, syn_res_OA_veh$vehicle))
# Recode so vehicle is 1, else crime types 0.
Data_vehicle <- syn_res_OA_veh %>%
mutate(vehicle   = 1,
residence = 0,
theft     = 0,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for residence crime.
syn_res_OA_res <- syn_res_OA %>%
filter(residence != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_res <- as.data.frame(lapply(syn_res_OA_res, rep, syn_res_OA_res$residence))
# Recode so residence is 1, else crime types 0.
Data_residence <- syn_res_OA_res %>%
mutate(vehicle   = 0,
residence = 1,
theft     = 0,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for theft crime.
syn_res_OA_the <- syn_res_OA %>%
filter(theft != 0)
# Repeat individuals as many times as they were victimised.
syn_res_OA_the <- as.data.frame(lapply(syn_res_OA_the, rep, syn_res_OA_the$theft))
# Recode so theft is 1, else crime types 0.
Data_theft <- syn_res_OA_the %>%
mutate(vehicle   = 0,
residence = 0,
theft     = 1,
violence  = 0)
# Subset only those  synthetic individuals who were victimised for violence crime.
syn_res_OA_vio <- syn_res_OA %>%
filter(violence != 0)
# Repeat individuals as many times as they were victimised for violence.
syn_res_OA_vio <- as.data.frame(lapply(syn_res_OA_vio, rep, syn_res_OA_vio$violence))
# Recode so violence is 1, else crime types 0.
Data_violence <- syn_res_OA_vio %>%
mutate(vehicle   = 0,
residence = 0,
theft     = 0,
violence  = 1)
# Join csew with csew_vf. Warnings are not problematic.
csew_vf <- left_join(csew_vf, csew, by = "rowlabel")
# Recode copsknow variable to binary for regression model.
csew_vf <- csew_vf %>%
mutate(copsknow = if_else(condition = copsknow == 2, true = 0, false = copsknow),
copsknow = na_if(x = copsknow, 8),
copsknow = na_if(x = copsknow, 9))
# Recode victarea variable to binary for regression model.
csew_vf <- csew_vf %>%
mutate(victarea = if_else(condition = victarea == 2, true = 0, false = victarea),
victarea = na_if(x = victarea, 8),
victarea = na_if(x = victarea, 9))
# Filter vehicle crime types.
csew_vf_vehicle <-  csew_vf %>%
filter(crimtype == 1 | crimtype == 2 | crimtype == 3)
# Filter residence crime type.
csew_vf_residence <-  csew_vf %>%
filter(crimtype == 5  | crimtype == 6  | crimtype == 7  | crimtype == 8  |
crimtype == 9  | crimtype == 10 | crimtype == 11 | crimtype == 12 |
crimtype == 13 | crimtype == 14 | crimtype == 15 | crimtype == 16 |
crimtype == 17)
# Filter theft crime type.
csew_vf_theft <-  csew_vf %>%
filter(crimtype == 18 | crimtype == 19 | crimtype == 20 | crimtype == 4)
# Filter violence crime type.
csew_vf_violence <-  csew_vf %>%
filter(crimtype == 22 | crimtype == 23 | crimtype == 24 | crimtype == 25)
# Create GLM formula for predicting copsknow (dep. var.) with demographic variables (ind. var.).
glm_copsknow <- copsknow ~ age + sex + reseth + remploy + educat2
# Vehicle model.
model_repo_vehicle <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_vehicle)
summary(model_repo_vehicle)
PseudoR2(model_repo_vehicle)
# Residence model.
model_repo_residence <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_residence)
summary(model_repo_residence)
PseudoR2(model_repo_residence)
# Theft model.
model_repo_theft <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_theft)
summary(model_repo_theft)
PseudoR2(model_repo_theft)
# Violence model.
model_repo_violence <- glm(formula = glm_copsknow, family = binomial(link = "logit"), data = csew_vf_violence)
summary(model_repo_violence)
PseudoR2(model_repo_vehicle)
# Extract estimates for vehicle crime.
Data_vehicle <- Data_vehicle %>%
mutate(estimates = model_repo_vehicle$coefficients[1] +
Data_vehicle$Age       * model_repo_vehicle$coefficients[2] +
Data_vehicle$Male      * model_repo_vehicle$coefficients[3] +
Data_vehicle$White     * model_repo_vehicle$coefficients[4] +
Data_vehicle$No_income * model_repo_vehicle$coefficients[5] +
Data_vehicle$High_edu  * model_repo_vehicle$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
copsknow = rbinom(nrow(Data_vehicle), 1, exp_estimates))
# Check vehicle frequency distributions comparison.
table(csew_vf_vehicle$copsknow)
table(Data_vehicle$copsknow)
# Extract estimates for residence crime.
Data_residence <- Data_residence %>%
mutate(estimates = model_repo_residence$coefficients[1] +
Data_residence$Age       * model_repo_residence$coefficients[2] +
Data_residence$Male      * model_repo_residence$coefficients[3] +
Data_residence$White     * model_repo_residence$coefficients[4] +
Data_residence$No_income * model_repo_residence$coefficients[5] +
Data_residence$High_edu  * model_repo_residence$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
copsknow = rbinom(nrow(Data_residence), 1, exp_estimates))
# Check residence frequency distrbibutions comparison.
table(csew_vf_residence$copsknow)
table(Data_residence$copsknow)
# Extract theft for residence crime.
Data_theft <- Data_theft %>%
mutate(estimates = model_repo_theft$coefficients[1] +
Data_theft$Age       * model_repo_theft$coefficients[2] +
Data_theft$Male      * model_repo_theft$coefficients[3] +
Data_theft$White     * model_repo_theft$coefficients[4] +
Data_theft$No_income * model_repo_theft$coefficients[5] +
Data_theft$High_edu  * model_repo_theft$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
copsknow = rbinom(nrow(Data_theft), 1, exp_estimates))
# Check theft frequency distrbibutions comparison.
table(csew_vf_theft$copsknow)
table(Data_theft$copsknow)
# Extract violence for residence crime.
Data_violence <- Data_violence %>%
mutate(estimates = model_repo_violence$coefficients[1] +
Data_violence$Age       * model_repo_violence$coefficients[2] +
Data_violence$Male      * model_repo_violence$coefficients[3] +
Data_violence$White     * model_repo_violence$coefficients[4] +
Data_violence$No_income * model_repo_violence$coefficients[5] +
Data_violence$High_edu  * model_repo_violence$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
copsknow = rbinom(nrow(Data_violence), 1, exp_estimates))
# Check violence frequency distrbibutions comparison.
table(csew_vf_violence$copsknow)
table(Data_violence$copsknow)
# Create GLM formula for predicting victarea (dep. var.) with demographic variables (ind. var.).
glm_victarea <- victarea ~ age + sex + reseth + remploy + educat2
# Vehicle model.
model_area_vehicle <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_vehicle)
summary(model_area_vehicle)
PseudoR2(model_area_vehicle)
# Residence model.
model_area_residence <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_residence)
summary(model_area_residence)
PseudoR2(model_area_residence)
# Theft model.
model_area_theft <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_theft)
summary(model_area_theft)
PseudoR2(model_area_theft)
# Violence model.
model_area_violence <- glm(formula = glm_victarea, family = binomial(link = "logit"), data = csew_vf_violence)
summary(model_area_violence)
PseudoR2(model_area_vehicle)
# Extract estimates for vehicle crime.
Data_vehicle <- Data_vehicle %>%
mutate(estimates = model_area_vehicle$coefficients[1] +
Data_vehicle$Age       * model_area_vehicle$coefficients[2] +
Data_vehicle$Male      * model_area_vehicle$coefficients[3] +
Data_vehicle$White     * model_area_vehicle$coefficients[4] +
Data_vehicle$No_income * model_area_vehicle$coefficients[5] +
Data_vehicle$High_edu  * model_area_vehicle$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_vehicle), 1, exp_estimates))
# Check vehicle frequency distributions comparison.
table(csew_vf_vehicle$victarea)
table(Data_vehicle$victarea)
# Extract estimates for residence crime.
Data_residence <- Data_residence %>%
mutate(estimates = model_area_residence$coefficients[1] +
Data_residence$Age       * model_area_residence$coefficients[2] +
Data_residence$Male      * model_area_residence$coefficients[3] +
Data_residence$White     * model_area_residence$coefficients[4] +
Data_residence$No_income * model_area_residence$coefficients[5] +
Data_residence$High_edu  * model_area_residence$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_residence), 1, exp_estimates))
# Check residence frequency distrbibutions comparison.
table(csew_vf_residence$victarea)
table(Data_residence$victarea)
# Extract theft for residence crime.
Data_theft <- Data_theft %>%
mutate(estimates = model_area_theft$coefficients[1] +
Data_theft$Age       * model_area_theft$coefficients[2] +
Data_theft$Male      * model_area_theft$coefficients[3] +
Data_theft$White     * model_area_theft$coefficients[4] +
Data_theft$No_income * model_area_theft$coefficients[5] +
Data_theft$High_edu  * model_area_theft$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_theft), 1, exp_estimates))
# Check theft frequency distrbibutions comparison.
table(csew_vf_theft$victarea)
table(Data_theft$victarea)
# Extract violence for residence crime.
Data_violence <- Data_violence %>%
mutate(estimates = model_area_violence$coefficients[1] +
Data_violence$Age       * model_area_violence$coefficients[2] +
Data_violence$Male      * model_area_violence$coefficients[3] +
Data_violence$White     * model_area_violence$coefficients[4] +
Data_violence$No_income * model_area_violence$coefficients[5] +
Data_violence$High_edu  * model_area_violence$coefficients[6],
exp_estimates = exp(estimates) / (1 + exp(estimates)),
victarea = rbinom(nrow(Data_violence), 1, exp_estimates))
# Check violence frequency distrbibutions comparison.
table(csew_vf_violence$victarea)
table(Data_violence$victarea)
# Row bind each crime type data frame. Involves some factor -> character coercion for binding.
Data_crimes <- bind_rows(Data_vehicle, Data_residence, Data_theft, Data_violence)
# Select only crimes that happen in local area.
Data_crimes <- Data_crimes %>%
filter(victarea == 1)
# Load in census unit look-up table (OA, LSOA, MSOA, LAD).
OA_to_LAD <- read_csv(here("data","Output_Area_to_Lower_Layer_Super_Output_Area_to_Middle_Layer_Super_Output_Area_to_Local_Authority_District_December_2017_Lookup_in_Great_Britain__Classification_Version_2.csv"))
# Rename OA column and filter for Manchester.
OA_to_LAD <- OA_to_LAD %>%
rename(OA = OA11CD) %>%
filter(LAD17NM == "Manchester")
# Join to Data_crimes, remove unwaned columns, rename census units.
Data_crimes <- Data_crimes %>%
left_join(OA_to_LAD) %>%
rename(LSOA = LSOA11CD,
MSOA = MSOA11CD,
LAD  = LAD17CD) %>%
select(ID:violence, copsknow, LSOA, MSOA, LAD)
# Read in census look-up table(LSOA, Ward). Warnings not an issue.
LSOA_to_ward <- read_csv(here("data", "Lower_Layer_Super_Output_Area_2011_to_Ward_2018_Lookup_in_England_and_Wales_v3.csv"))
# Rename LSOA column and filter for Manchester.
LSOA_to_ward <- LSOA_to_ward %>%
rename(LSOA = LSOA11CD) %>%
filter(LAD18NM == "Manchester")
# Join to Data_crimes, remove unwaned columns, rename census units.
Data_crimes <- Data_crimes %>%
left_join(LSOA_to_ward) %>%
rename(WD = WD18CD) %>%
select(ID:LAD, WD)
# Save.
# write_csv(x = Data_crimes, path = here("data","Data_crimes.csv"))
# For each spatial scale, tally the number of total crimes which ocurred (based on CSEW estimates) and
# the number of crimes which were known to police.
# Split Data_crimes into a list for loop. Each one is renamed 'unit' so the loop function is simple later.
# We use this again later so it's written as a function now.
split_fun <- function(x){
list(x %>% rename(unit = OA)  ,
x %>% rename(unit = LSOA),
x %>% rename(unit = MSOA),
x %>% rename(unit = WD)  ,
x %>% rename(unit = LAD))
}
crimes_known_list <- split_fun(Data_crimes)
# Function for aggregating by unit.
crimes_known_fun <- function(x) {
x %>%
group_by(unit) %>%
summarise(known = sum(copsknow)) %>%
ungroup()
}
# Loop aggregtion through list, so we get counts known to police for each spatial scale.
crimes_known_agg_list <- lapply(crimes_known_list, crimes_known_fun)
# Function to tally number of crimes (estimated from CSEW) per unit.
crimes_fun <- function(x){
x %>%
group_by(unit)%>%
tally() %>%
ungroup() %>%
rename(all_crimes = n)
}
# Loop aggregation through list, so we get the crimes counts for each spatial scale.
crimes_list <- lapply(crimes_known_list, crimes_fun)
# Merge each together
crimes_known_full_list <- map2(crimes_list, crimes_known_agg_list, left_join)
# Name each element of list.
unit_names <- c("OA","LSOA","MSOA","WD","LAD")
names(crimes_known_full_list) <- unit_names
# Now we do the same but for each crime type.
crimes_Data_vehicle   <- Data_crimes %>% filter(vehicle == 1)
crimes_Data_residence <- Data_crimes %>% filter(residence == 1)
crimes_Data_theft     <- Data_crimes %>% filter(theft == 1)
crimes_Data_violence  <- Data_crimes %>% filter(violence == 1)
# Split function on each crime type df.
crimes_known_vehicle_list   <- split_fun(crimes_Data_vehicle)
crimes_known_residence_list <- split_fun(crimes_Data_residence)
crimes_known_theft_list     <- split_fun(crimes_Data_theft)
crimes_known_violence_list  <- split_fun(crimes_Data_violence)
# # Loop through lists, so we get counts known to police for each spatial scale, for each crime type.
crimes_known_vehicle_agg_list   <- lapply(crimes_known_vehicle_list  , crimes_known_fun)
crimes_known_residence_agg_list <- lapply(crimes_known_residence_list, crimes_known_fun)
crimes_known_theft_agg_list     <- lapply(crimes_known_theft_list    , crimes_known_fun)
crimes_known_violence_agg_list  <- lapply(crimes_known_violence_list , crimes_known_fun)
# Loop through lists, so we get the crimes counts for each spatial scale, for each crime type.
crimes_vehicle_list   <- lapply(crimes_known_vehicle_list, crimes_fun)
crimes_residence_list <- lapply(crimes_known_residence_list, crimes_fun)
crimes_theft_list     <- lapply(crimes_known_theft_list, crimes_fun)
crimes_violence_list  <- lapply(crimes_known_violence_list, crimes_fun)
# Merge each together
crimes_known_vehicle_full_list   <- map2(crimes_vehicle_list  , crimes_known_vehicle_agg_list  , left_join)
crimes_known_residence_full_list <- map2(crimes_residence_list, crimes_known_residence_agg_list, left_join)
crimes_known_theft_full_list     <- map2(crimes_theft_list    , crimes_known_theft_agg_list    , left_join)
crimes_known_violence_full_list  <- map2(crimes_violence_list , crimes_known_violence_agg_list , left_join)
# Name element of each list
names(crimes_known_vehicle_full_list)   <- unit_names
names(crimes_known_residence_full_list) <- unit_names
names(crimes_known_theft_full_list)     <- unit_names
names(crimes_known_violence_full_list)  <- unit_names
# Bind together so descriptives easily generated (omit crimes_LAD as only 1 observation).
crimes_units    <- bind_rows(crimes_known_full_list           , .id = "unit_type")
vehicle_units   <- bind_rows(crimes_known_vehicle_full_list   , .id = "unit_type")
residence_units <- bind_rows(crimes_known_residence_full_list , .id = "unit_type")
theft_units     <- bind_rows(crimes_known_theft_full_list     , .id = "unit_type")
violent_units   <- bind_rows(crimes_known_violence_full_list  , .id = "unit_type")
## Calculate RD% by crime type.
# Function for statistics, factor reordering.
rd_fun <- function(x) {
x %>%
mutate(RD = ((known - all_crimes) / all_crimes) * 100,
abs_RD = abs(RD),
unit_type = fct_relevel(unit_type, "OA", "LSOA", "MSOA", "WD"))
}
# Compile into list and name
units_list <- list(crimes_units, vehicle_units, residence_units, theft_units, violent_units)
names(units_list) <- c("all_crimes", "vehicle", "residence", "theft", "violent")
#names(units_list) <- c("all_crimes", "vehicle_crime", "residence_crime", "theft_crime", "violent_crime")
# Loop funtion thru list
rd_stats_list <- lapply(units_list, rd_fun)
# Descriptives function
desc_fun <- function(x){
x %>%
group_by(unit_type) %>%
summarise(mean_RD    = mean(RD),
min_RD     = min(RD),
max_RD     = max(RD),
var_RD     = var(RD),
sd_RD      = sd(RD),
med_abs_RD = median(abs_RD))
}
# Print descriptives.
lapply(rd_stats_list, desc_fun)
# Visualise boxplot for each all crimes and by crime type. First remove LAD because no distribution to speak of.
rd_stats_list <- lapply(rd_stats_list, function(x){filter(x, unit_type != "LAD")})
# Plot function
plot_fun <- function(x){
ggplot(data = x) +
theme_bw() +
geom_boxplot(mapping = aes(x = unit_type,  y = abs_RD, fill = unit_type), colour = "black") +
labs(y = "RD", x = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("OA","LSOA","MSOA","Ward")) +
theme(legend.position = "none",
axis.title = element_text(size = 12),
axis.text = element_text(size = 12))
}
# Run function through list
boxplot_list <- lapply(rd_stats_list, plot_fun)
# Save visualisations individually.
lapply(names(boxplot_list),
function(x)ggsave(height = 6, width = 7, filename = paste("visuals/",x,".png",sep=""), plot=boxplot_list[[x]]))
# Single visual using cowplot.
full_plot <- plot_grid(plotlist = boxplot_list, nrow = 3, ncol = 2, labels = c("(a)","(b)","(c)","(d)","(e)","(f)"), scale = 0.9)
# Save full plot.
ggsave(plot = full_plot, filename = "visuals/full_boxplot.png", height = 14, width = 8)
# New grouped plot 14.05.20.
rd_stats_df <- bind_rows(rd_stats_list, .id = "crime_type")
full_plot_group <- ggplot(data = rd_stats_df) +
theme_bw() +
geom_boxplot(mapping = aes(x = crime_type,  y = abs_RD, fill = unit_type), colour = "black", size = 0.5,
position=position_dodge(width=1), width = 0.9) +
labs(y = "RD", x = "", fill = "") +
scale_fill_viridis_d(alpha = 0.7) +
scale_x_discrete(labels = c("All crime","Residence","Theft","Vehicle","Violent")) +
theme(legend.position = "top",
axis.title = element_text(size = 14),
axis.text = element_text(size = 14),
legend.key.size = unit(1.5, "cm"))
# Save full grouped plot
ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped.png", height = 10, width = 12)
# ggsave(plot = full_plot_group, filename = "visuals/full_boxplot_grouped_outliers.png", height = 10, width = 12)
# Function to calculate ARB stats for each crime type.
ARB_fun <- function(x){
x %>%
mutate(RB  = ((all_crimes / known)-1),
ARB = abs(RB)) %>%
group_by(unit_type) %>%
summarise(mean_ARB    = mean(ARB),
min_ARB     = min(ARB),
max_ARB     = max(ARB),
var_ARB     = var(ARB),
sd_ARB      = sd(ARB))
}
# Print stats.
lapply(rd_stats_list, ARB_fun)
# Load crimes known to Greater Manchester Police in 2011/12.
GMP_all <- read_csv(here("data/GMP_all.csv"))
# Merge spatial information of wards.
GMP_manc <- GMP_all %>%
left_join(LSOA_to_ward, by = c("lsoa11cd" = "LSOA")) %>%
filter(ladnm == "Manchester")
# Check to remove crimes which did not occurr within a Manchester LSOA.
#GMP_manc <- subset(GMP_all, LSOA.code %in% LSOA_to_ward$LSOA)
# Recode crime types to match categories used thus far.
GMP_manc <- GMP_manc %>%
mutate(Crime.type = recode(Crime.type,
"Anti-social behaviour"       = "other",
"Burglary"                    = "residence",
"Criminal damage and arson"   = "residence",
"Drugs"                       = "other",
"Other crime"                 = "other",
"Other theft"                 = "theft",
"Public disorder and weapons" = "other",
"Robbery"                     = "theft",
"Shoplifting"                 = "other",
"Vehicle crime"               = "vehicle",
"Violent crime"               = "violent")) %>%
filter(Crime.type == "residence" | Crime.type == "theft" | Crime.type == "vehicle" | Crime.type == "violent")
# Subset GMP_all by the different crime type categories.
GMP_all_list <- group_split(GMP_manc, Crime.type)
# Append total crimes to the list.
GMP_all_list <- c((GMP_all_list), list(GMP_manc))
# Rename elements of the list (order checked manually).
names(GMP_all_list) <- c("residence", "theft", "vehicle", "violent", "all_crimes")
#names(GMP_all_list) <- c("other", "residence_crime", "theft_crime", "vehicle_crime", "violent_crime", "all_crimes")
# Create sf point objects for each df in the list.
GMP_all_list_sf <- lapply(GMP_all_list, function(x)st_as_sf(x, coords = c(x = "Longitude", y = "Latitude"), crs = 4326))
# Transform each sf object in the list to BNG.
GMP_all_list_sf <- lapply(GMP_all_list_sf, function(x)st_transform(x, 27700))
# Load in spatial polygons at OA, LSOA, MSOA and Ward level.
ward_sf <- st_read("data/shapefiles/ward_manc_sf.shp")
msoa_sf <- st_read("data/shapefiles/msoa_manc_sf.shp")
lsoa_sf <- st_read("data/shapefiles/lsoa_manc_sf.shp")
oa_sf   <- st_read("data/shapefiles/oa_manc_sf.shp")
# Compile into list and name elements.
sf_list <- list(ward_sf, msoa_sf, lsoa_sf, oa_sf)
names(sf_list) <- c("ward_sf","msoa_sf","lsoa_sf","oa_sf")
# Set CRS.
sf_list <- lapply(sf_list, function(x)st_transform(x, 27700))
# We now want to counts points in polygons for each combinations of crime type points (GMP_manc_sf).
# and spatial scale polygons (sf_list).
# For now, split sf_list back into different objects.
list2env(sf_list,envir=.GlobalEnv)
# Aggregating point to polygons: Ward
ward_agg_list <- lapply(GMP_all_list_sf, function(x)ward_sf %>% mutate(count = lengths(st_intersects(ward_sf, x))))
# Aggregating point to polygons: MSOA
msoa_agg_list <- lapply(GMP_all_list_sf, function(x)msoa_sf %>% mutate(count = lengths(st_intersects(msoa_sf, x))))
# Aggregating point to polygons: LSOA
lsoa_agg_list <- lapply(GMP_all_list_sf, function(x)lsoa_sf %>% mutate(count = lengths(st_intersects(lsoa_sf, x))))
# Aggregating point to polygons: OA
oa_agg_list <- lapply(GMP_all_list_sf, function(x)oa_sf %>% mutate(count = lengths(st_intersects(oa_sf, x))))
# Remove 'other' category so the merge works. We don't use it for analysis but it was needed to get the total crime figure.
#oa_agg_list   <- oa_agg_list  [-1]
#lsoa_agg_list <- lsoa_agg_list[-1]
#msoa_agg_list <- msoa_agg_list[-1]
#ward_agg_list <- ward_agg_list[-1]
# Join this real police recorded crime data with our CSEW estimates.
# Split existing unit_list into list of lists.
unit_list_crime_types <- lapply(units_list, function(x)group_split(x, unit_type))
# The first element of each list is LAD, which we don't need for the comaprison. Keeping it would complicate the join.
unit_list_crime_types <- lapply(unit_list_crime_types, function(x) x[-1])
# Collate each list into global environment by crime type. First check what objects will be called.
names(unit_list_crime_types)
list2env(unit_list_crime_types,envir=.GlobalEnv)
# Extract each spatial scale (i.e. each element of 'unit_list_crime_types').
lsoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[1]])
msoa_gmp_df <- lapply(unit_list_crime_types, function(x) x[[2]])
oa_gmp_df   <- lapply(unit_list_crime_types, function(x) x[[3]])
ward_gmp_df <- lapply(unit_list_crime_types, function(x) x[[4]])
View(msoa_agg_list)
